"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tippyjs";
exports.ids = ["vendor-chunks/@tippyjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tippyjs/react/dist/tippy-react.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tippyjs/react/dist/tippy-react.esm.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   tippy: () => (/* reexport safe */ tippy_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   useSingleton: () => (/* binding */ useSingleton)\n/* harmony export */ });\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tippy.js */ \"(ssr)/./node_modules/tippy.js/dist/tippy.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nvar isBrowser =  false && 0;\nfunction preserveRef(ref, node) {\n    if (ref) {\n        if (typeof ref === \"function\") {\n            ref(node);\n        }\n        if (({}).hasOwnProperty.call(ref, \"current\")) {\n            ref.current = node;\n        }\n    }\n}\nfunction ssrSafeCreateDiv() {\n    return isBrowser && document.createElement(\"div\");\n}\nfunction toDataAttributes(attrs) {\n    var dataAttrs = {\n        \"data-placement\": attrs.placement\n    };\n    if (attrs.referenceHidden) {\n        dataAttrs[\"data-reference-hidden\"] = \"\";\n    }\n    if (attrs.escaped) {\n        dataAttrs[\"data-escaped\"] = \"\";\n    }\n    return dataAttrs;\n}\nfunction deepEqual(x, y) {\n    if (x === y) {\n        return true;\n    } else if (typeof x === \"object\" && x != null && typeof y === \"object\" && y != null) {\n        if (Object.keys(x).length !== Object.keys(y).length) {\n            return false;\n        }\n        for(var prop in x){\n            if (y.hasOwnProperty(prop)) {\n                if (!deepEqual(x[prop], y[prop])) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\nfunction uniqueByShape(arr) {\n    var output = [];\n    arr.forEach(function(item) {\n        if (!output.find(function(outputItem) {\n            return deepEqual(item, outputItem);\n        })) {\n            output.push(item);\n        }\n    });\n    return output;\n}\nfunction deepPreserveProps(instanceProps, componentProps) {\n    var _instanceProps$popper, _componentProps$poppe;\n    return Object.assign({}, componentProps, {\n        popperOptions: Object.assign({}, instanceProps.popperOptions, componentProps.popperOptions, {\n            modifiers: uniqueByShape([].concat(((_instanceProps$popper = instanceProps.popperOptions) == null ? void 0 : _instanceProps$popper.modifiers) || [], ((_componentProps$poppe = componentProps.popperOptions) == null ? void 0 : _componentProps$poppe.modifiers) || []))\n        })\n    });\n}\nvar useIsomorphicLayoutEffect = isBrowser ? react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_1__.useEffect;\nfunction useMutableBox(initialValue) {\n    // Using refs instead of state as it's recommended to not store imperative\n    // values in state due to memory problems in React(?)\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    if (!ref.current) {\n        ref.current = typeof initialValue === \"function\" ? initialValue() : initialValue;\n    }\n    return ref.current;\n}\nfunction updateClassName(box, action, classNames) {\n    classNames.split(/\\s+/).forEach(function(name) {\n        if (name) {\n            box.classList[action](name);\n        }\n    });\n}\nvar classNamePlugin = {\n    name: \"className\",\n    defaultValue: \"\",\n    fn: function fn(instance) {\n        var box = instance.popper.firstElementChild;\n        var isDefaultRenderFn = function isDefaultRenderFn() {\n            var _instance$props$rende;\n            return !!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy);\n        };\n        function add() {\n            if (instance.props.className && !isDefaultRenderFn()) {\n                if (true) {\n                    console.warn([\n                        \"@tippyjs/react: Cannot use `className` prop in conjunction with\",\n                        \"`render` prop. Place the className on the element you are\",\n                        \"rendering.\"\n                    ].join(\" \"));\n                }\n                return;\n            }\n            updateClassName(box, \"add\", instance.props.className);\n        }\n        function remove() {\n            if (isDefaultRenderFn()) {\n                updateClassName(box, \"remove\", instance.props.className);\n            }\n        }\n        return {\n            onCreate: add,\n            onBeforeUpdate: remove,\n            onAfterUpdate: add\n        };\n    }\n};\nfunction TippyGenerator(tippy) {\n    function Tippy(_ref) {\n        var children = _ref.children, content = _ref.content, visible = _ref.visible, singleton = _ref.singleton, render = _ref.render, reference = _ref.reference, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$ignoreAttributes = _ref.ignoreAttributes, ignoreAttributes = _ref$ignoreAttributes === void 0 ? true : _ref$ignoreAttributes, __source = _ref.__source, __self = _ref.__self, restOfNativeProps = _objectWithoutPropertiesLoose(_ref, [\n            \"children\",\n            \"content\",\n            \"visible\",\n            \"singleton\",\n            \"render\",\n            \"reference\",\n            \"disabled\",\n            \"ignoreAttributes\",\n            \"__source\",\n            \"__self\"\n        ]);\n        var isControlledMode = visible !== undefined;\n        var isSingletonMode = singleton !== undefined;\n        var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), mounted = _useState[0], setMounted = _useState[1];\n        var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({}), attrs = _useState2[0], setAttrs = _useState2[1];\n        var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(), singletonContent = _useState3[0], setSingletonContent = _useState3[1];\n        var mutableBox = useMutableBox(function() {\n            return {\n                container: ssrSafeCreateDiv(),\n                renders: 1\n            };\n        });\n        var props = Object.assign({\n            ignoreAttributes: ignoreAttributes\n        }, restOfNativeProps, {\n            content: mutableBox.container\n        });\n        if (isControlledMode) {\n            if (true) {\n                [\n                    \"trigger\",\n                    \"hideOnClick\",\n                    \"showOnCreate\"\n                ].forEach(function(nativeStateProp) {\n                    if (props[nativeStateProp] !== undefined) {\n                        console.warn([\n                            \"@tippyjs/react: Cannot specify `\" + nativeStateProp + \"` prop in\",\n                            \"controlled mode (`visible` prop)\"\n                        ].join(\" \"));\n                    }\n                });\n            }\n            props.trigger = \"manual\";\n            props.hideOnClick = false;\n        }\n        if (isSingletonMode) {\n            disabled = true;\n        }\n        var computedProps = props;\n        var plugins = props.plugins || [];\n        if (render) {\n            computedProps = Object.assign({}, props, {\n                plugins: isSingletonMode && singleton.data != null ? [].concat(plugins, [\n                    {\n                        fn: function fn() {\n                            return {\n                                onTrigger: function onTrigger(instance, event) {\n                                    var node = singleton.data.children.find(function(_ref2) {\n                                        var instance = _ref2.instance;\n                                        return instance.reference === event.currentTarget;\n                                    });\n                                    instance.state.$$activeSingletonInstance = node.instance;\n                                    setSingletonContent(node.content);\n                                }\n                            };\n                        }\n                    }\n                ]) : plugins,\n                render: function render() {\n                    return {\n                        popper: mutableBox.container\n                    };\n                }\n            });\n        }\n        var deps = [\n            reference\n        ].concat(children ? [\n            children.type\n        ] : []); // CREATE\n        useIsomorphicLayoutEffect(function() {\n            var element = reference;\n            if (reference && reference.hasOwnProperty(\"current\")) {\n                element = reference.current;\n            }\n            var instance = tippy(element || mutableBox.ref || ssrSafeCreateDiv(), Object.assign({}, computedProps, {\n                plugins: [\n                    classNamePlugin\n                ].concat(props.plugins || [])\n            }));\n            mutableBox.instance = instance;\n            if (disabled) {\n                instance.disable();\n            }\n            if (visible) {\n                instance.show();\n            }\n            if (isSingletonMode) {\n                singleton.hook({\n                    instance: instance,\n                    content: content,\n                    props: computedProps,\n                    setSingletonContent: setSingletonContent\n                });\n            }\n            setMounted(true);\n            return function() {\n                instance.destroy();\n                singleton == null ? void 0 : singleton.cleanup(instance);\n            };\n        }, deps); // UPDATE\n        useIsomorphicLayoutEffect(function() {\n            var _instance$popperInsta;\n            // Prevent this effect from running on 1st render\n            if (mutableBox.renders === 1) {\n                mutableBox.renders++;\n                return;\n            }\n            var instance = mutableBox.instance;\n            instance.setProps(deepPreserveProps(instance.props, computedProps)); // Fixes #264\n            (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.forceUpdate();\n            if (disabled) {\n                instance.disable();\n            } else {\n                instance.enable();\n            }\n            if (isControlledMode) {\n                if (visible) {\n                    instance.show();\n                } else {\n                    instance.hide();\n                }\n            }\n            if (isSingletonMode) {\n                singleton.hook({\n                    instance: instance,\n                    content: content,\n                    props: computedProps,\n                    setSingletonContent: setSingletonContent\n                });\n            }\n        });\n        useIsomorphicLayoutEffect(function() {\n            var _instance$props$poppe;\n            if (!render) {\n                return;\n            }\n            var instance = mutableBox.instance;\n            instance.setProps({\n                popperOptions: Object.assign({}, instance.props.popperOptions, {\n                    modifiers: [].concat((((_instance$props$poppe = instance.props.popperOptions) == null ? void 0 : _instance$props$poppe.modifiers) || []).filter(function(_ref3) {\n                        var name = _ref3.name;\n                        return name !== \"$$tippyReact\";\n                    }), [\n                        {\n                            name: \"$$tippyReact\",\n                            enabled: true,\n                            phase: \"beforeWrite\",\n                            requires: [\n                                \"computeStyles\"\n                            ],\n                            fn: function fn(_ref4) {\n                                var _state$modifiersData;\n                                var state = _ref4.state;\n                                var hideData = (_state$modifiersData = state.modifiersData) == null ? void 0 : _state$modifiersData.hide; // WARNING: this is a high-risk path that can cause an infinite\n                                // loop. This expression _must_ evaluate to false when required\n                                if (attrs.placement !== state.placement || attrs.referenceHidden !== (hideData == null ? void 0 : hideData.isReferenceHidden) || attrs.escaped !== (hideData == null ? void 0 : hideData.hasPopperEscaped)) {\n                                    setAttrs({\n                                        placement: state.placement,\n                                        referenceHidden: hideData == null ? void 0 : hideData.isReferenceHidden,\n                                        escaped: hideData == null ? void 0 : hideData.hasPopperEscaped\n                                    });\n                                }\n                                state.attributes.popper = {};\n                            }\n                        }\n                    ])\n                })\n            });\n        }, [\n            attrs.placement,\n            attrs.referenceHidden,\n            attrs.escaped\n        ].concat(deps));\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, children ? /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.cloneElement)(children, {\n            ref: function ref(node) {\n                mutableBox.ref = node;\n                preserveRef(children.ref, node);\n            }\n        }) : null, mounted && /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal)(render ? render(toDataAttributes(attrs), singletonContent, mutableBox.instance) : content, mutableBox.container));\n    }\n    return Tippy;\n}\nfunction useSingletonGenerator(createSingleton) {\n    return function useSingleton(_temp) {\n        var _ref = _temp === void 0 ? {} : _temp, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$overrides = _ref.overrides, overrides = _ref$overrides === void 0 ? [] : _ref$overrides;\n        var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), mounted = _useState[0], setMounted = _useState[1];\n        var mutableBox = useMutableBox({\n            children: [],\n            renders: 1\n        });\n        useIsomorphicLayoutEffect(function() {\n            if (!mounted) {\n                setMounted(true);\n                return;\n            }\n            var children = mutableBox.children, sourceData = mutableBox.sourceData;\n            if (!sourceData) {\n                if (true) {\n                    console.error([\n                        \"@tippyjs/react: The `source` variable from `useSingleton()` has\",\n                        \"not been passed to a <Tippy /> component.\"\n                    ].join(\" \"));\n                }\n                return;\n            }\n            var instance = createSingleton(children.map(function(child) {\n                return child.instance;\n            }), Object.assign({}, sourceData.props, {\n                popperOptions: sourceData.instance.props.popperOptions,\n                overrides: overrides,\n                plugins: [\n                    classNamePlugin\n                ].concat(sourceData.props.plugins || [])\n            }));\n            mutableBox.instance = instance;\n            if (disabled) {\n                instance.disable();\n            }\n            return function() {\n                instance.destroy();\n                mutableBox.children = children.filter(function(_ref2) {\n                    var instance = _ref2.instance;\n                    return !instance.state.isDestroyed;\n                });\n            };\n        }, [\n            mounted\n        ]);\n        useIsomorphicLayoutEffect(function() {\n            if (!mounted) {\n                return;\n            }\n            if (mutableBox.renders === 1) {\n                mutableBox.renders++;\n                return;\n            }\n            var children = mutableBox.children, instance = mutableBox.instance, sourceData = mutableBox.sourceData;\n            if (!(instance && sourceData)) {\n                return;\n            }\n            var _sourceData$props = sourceData.props, content = _sourceData$props.content, props = _objectWithoutPropertiesLoose(_sourceData$props, [\n                \"content\"\n            ]);\n            instance.setProps(deepPreserveProps(instance.props, Object.assign({}, props, {\n                overrides: overrides\n            })));\n            instance.setInstances(children.map(function(child) {\n                return child.instance;\n            }));\n            if (disabled) {\n                instance.disable();\n            } else {\n                instance.enable();\n            }\n        });\n        return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(function() {\n            var source = {\n                data: mutableBox,\n                hook: function hook(data) {\n                    mutableBox.sourceData = data;\n                    mutableBox.setSingletonContent = data.setSingletonContent;\n                },\n                cleanup: function cleanup() {\n                    mutableBox.sourceData = null;\n                }\n            };\n            var target = {\n                hook: function hook(data) {\n                    var _mutableBox$instance, _mutableBox$instance2;\n                    mutableBox.children = mutableBox.children.filter(function(_ref3) {\n                        var instance = _ref3.instance;\n                        return data.instance !== instance;\n                    });\n                    mutableBox.children.push(data);\n                    if (((_mutableBox$instance = mutableBox.instance) == null ? void 0 : _mutableBox$instance.state.isMounted) && ((_mutableBox$instance2 = mutableBox.instance) == null ? void 0 : _mutableBox$instance2.state.$$activeSingletonInstance) === data.instance) {\n                        mutableBox.setSingletonContent == null ? void 0 : mutableBox.setSingletonContent(data.content);\n                    }\n                    if (mutableBox.instance && !mutableBox.instance.state.isDestroyed) {\n                        mutableBox.instance.setInstances(mutableBox.children.map(function(child) {\n                            return child.instance;\n                        }));\n                    }\n                },\n                cleanup: function cleanup(instance) {\n                    mutableBox.children = mutableBox.children.filter(function(data) {\n                        return data.instance !== instance;\n                    });\n                    if (mutableBox.instance && !mutableBox.instance.state.isDestroyed) {\n                        mutableBox.instance.setInstances(mutableBox.children.map(function(child) {\n                            return child.instance;\n                        }));\n                    }\n                }\n            };\n            return [\n                source,\n                target\n            ];\n        }, []);\n    };\n}\nvar forwardRef = function(Tippy, defaultProps) {\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function TippyWrapper(_ref, _ref2) {\n        var children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, [\n            \"children\"\n        ]);\n        return(/*#__PURE__*/ // If I spread them separately here, Babel adds the _extends ponyfill for\n        // some reason\n        react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Tippy, Object.assign({}, defaultProps, props), children ? /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.cloneElement)(children, {\n            ref: function ref(node) {\n                preserveRef(_ref2, node);\n                preserveRef(children.ref, node);\n            }\n        }) : null));\n    });\n};\nvar useSingleton = /*#__PURE__*/ useSingletonGenerator(tippy_js__WEBPACK_IMPORTED_MODULE_0__.createSingleton);\nvar index = /*#__PURE__*/ forwardRef(/*#__PURE__*/ TippyGenerator(tippy_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (index);\n //# sourceMappingURL=tippy-react.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tippyjs/react/dist/tippy-react.esm.js\n");

/***/ })

};
;