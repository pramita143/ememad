"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tabbable";
exports.ids = ["vendor-chunks/tabbable"];
exports.modules = {

/***/ "(ssr)/./node_modules/tabbable/dist/index.esm.js":
/*!*************************************************!*\
  !*** ./node_modules/tabbable/dist/index.esm.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   focusable: () => (/* binding */ focusable),\n/* harmony export */   isFocusable: () => (/* binding */ isFocusable),\n/* harmony export */   isTabbable: () => (/* binding */ isTabbable),\n/* harmony export */   tabbable: () => (/* binding */ tabbable)\n/* harmony export */ });\n/*!\n* tabbable 6.1.1\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/ // NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nvar candidateSelectors = [\n    \"input:not([inert])\",\n    \"select:not([inert])\",\n    \"textarea:not([inert])\",\n    \"a[href]:not([inert])\",\n    \"button:not([inert])\",\n    \"[tabindex]:not(slot):not([inert])\",\n    \"audio[controls]:not([inert])\",\n    \"video[controls]:not([inert])\",\n    '[contenteditable]:not([contenteditable=\"false\"]):not([inert])',\n    \"details>summary:first-of-type:not([inert])\",\n    \"details:not([inert])\"\n];\nvar candidateSelector = /* #__PURE__ */ candidateSelectors.join(\",\");\nvar NoElement = typeof Element === \"undefined\";\nvar matches = NoElement ? function() {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {\n    var _element$getRootNode;\n    return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);\n} : function(element) {\n    return element === null || element === void 0 ? void 0 : element.ownerDocument;\n};\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */ var isInert = function isInert(node, lookUp) {\n    var _node$getAttribute;\n    if (lookUp === void 0) {\n        lookUp = true;\n    }\n    // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n    //  JS API property; we have to check the attribute, which can either be empty or 'true';\n    //  if it's `null` (not specified) or 'false', it's an active element\n    var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, \"inert\");\n    var inert = inertAtt === \"\" || inertAtt === \"true\";\n    // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n    //  if it weren't for `matches()` not being a function on shadow roots; the following\n    //  code works for any kind of node\n    // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n    //  so it likely would not support `:is([inert] *)` either...\n    var result = inert || lookUp && node && isInert(node.parentNode); // recursive\n    return result;\n};\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */ var isContentEditable = function isContentEditable(node) {\n    var _node$getAttribute2;\n    // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n    //  to use the attribute directly to check for this, which can either be empty or 'true';\n    //  if it's `null` (not specified) or 'false', it's a non-editable element\n    var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, \"contenteditable\");\n    return attValue === \"\" || attValue === \"true\";\n};\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */ var getCandidates = function getCandidates(el, includeContainer, filter) {\n    // even if `includeContainer=false`, we still have to check it for inertness because\n    //  if it's inert, all its children are inert\n    if (isInert(el)) {\n        return [];\n    }\n    var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n    if (includeContainer && matches.call(el, candidateSelector)) {\n        candidates.unshift(el);\n    }\n    candidates = candidates.filter(filter);\n    return candidates;\n};\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */ /**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */ /**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */ /**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */ /**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */ var getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n    var candidates = [];\n    var elementsToCheck = Array.from(elements);\n    while(elementsToCheck.length){\n        var element = elementsToCheck.shift();\n        if (isInert(element, false)) {\n            continue;\n        }\n        if (element.tagName === \"SLOT\") {\n            // add shadow dom slot scope (slot itself cannot be focusable)\n            var assigned = element.assignedElements();\n            var content = assigned.length ? assigned : element.children;\n            var nestedCandidates = getCandidatesIteratively(content, true, options);\n            if (options.flatten) {\n                candidates.push.apply(candidates, nestedCandidates);\n            } else {\n                candidates.push({\n                    scopeParent: element,\n                    candidates: nestedCandidates\n                });\n            }\n        } else {\n            // check candidate element\n            var validCandidate = matches.call(element, candidateSelector);\n            if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n                candidates.push(element);\n            }\n            // iterate over shadow content if possible\n            var shadowRoot = element.shadowRoot || // check for an undisclosed shadow\n            typeof options.getShadowRoot === \"function\" && options.getShadowRoot(element);\n            // no inert look up because we're already drilling down and checking for inertness\n            //  on the way down, so all containers to this root node should have already been\n            //  vetted as non-inert\n            var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));\n            if (shadowRoot && validShadowRoot) {\n                // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n                //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n                //  child candidates found because they're likely slotted elements (elements that are\n                //  children of the web component element (which has the shadow), in the light dom, but\n                //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n                //  _after_ we return from this recursive call\n                var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n                if (options.flatten) {\n                    candidates.push.apply(candidates, _nestedCandidates);\n                } else {\n                    candidates.push({\n                        scopeParent: element,\n                        candidates: _nestedCandidates\n                    });\n                }\n            } else {\n                // there's not shadow so just dig into the element's (light dom) children\n                //  __without__ giving the element special scope treatment\n                elementsToCheck.unshift.apply(elementsToCheck, element.children);\n            }\n        }\n    }\n    return candidates;\n};\nvar getTabindex = function getTabindex(node, isScope) {\n    if (node.tabIndex < 0) {\n        // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n        // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n        // yet they are still part of the regular tab order; in FF, they get a default\n        // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n        // order, consider their tab index to be 0.\n        // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n        // so if they don't have a tabindex attribute specifically set, assume it's 0.\n        //\n        // isScope is positive for custom element with shadow root or slot that by default\n        // have tabIndex -1, but need to be sorted by document order in order for their\n        // content to be inserted in the correct position\n        if ((isScope || /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && isNaN(parseInt(node.getAttribute(\"tabindex\"), 10))) {\n            return 0;\n        }\n    }\n    return node.tabIndex;\n};\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n    return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\nvar isInput = function isInput(node) {\n    return node.tagName === \"INPUT\";\n};\nvar isHiddenInput = function isHiddenInput(node) {\n    return isInput(node) && node.type === \"hidden\";\n};\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n    var r = node.tagName === \"DETAILS\" && Array.prototype.slice.apply(node.children).some(function(child) {\n        return child.tagName === \"SUMMARY\";\n    });\n    return r;\n};\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n    for(var i = 0; i < nodes.length; i++){\n        if (nodes[i].checked && nodes[i].form === form) {\n            return nodes[i];\n        }\n    }\n};\nvar isTabbableRadio = function isTabbableRadio(node) {\n    if (!node.name) {\n        return true;\n    }\n    var radioScope = node.form || getRootNode(node);\n    var queryRadios = function queryRadios(name) {\n        return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n    };\n    var radioSet;\n    if (false) {} else {\n        try {\n            radioSet = queryRadios(node.name);\n        } catch (err) {\n            // eslint-disable-next-line no-console\n            console.error(\"Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s\", err.message);\n            return false;\n        }\n    }\n    var checked = getCheckedRadio(radioSet, node.form);\n    return !checked || checked === node;\n};\nvar isRadio = function isRadio(node) {\n    return isInput(node) && node.type === \"radio\";\n};\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n    return isRadio(node) && !isTabbableRadio(node);\n};\n// determines if a node is ultimately attached to the window's document\nvar isNodeAttached = function isNodeAttached(node) {\n    var _nodeRoot;\n    // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n    //  (but NOT _the_ document; see second 'If' comment below for more).\n    // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n    //  is attached, and the one we need to check if it's in the document or not (because the\n    //  shadow, and all nodes it contains, is never considered in the document since shadows\n    //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n    //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n    //  visibility, including all the nodes it contains). The host could be any normal node,\n    //  or a custom element (i.e. web component). Either way, that's the one that is considered\n    //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n    //  tested).\n    // To further complicate things, we have to look all the way up until we find a shadow HOST\n    //  that is attached (or find none) because the node might be in nested shadows...\n    // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n    //  document (per the docs) and while it's a Document-type object, that document does not\n    //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n    //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n    //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n    //  node is actually detached.\n    // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n    //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n    //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n    //  `ownerDocument` will be `null`, hence the optional chaining on it.\n    var nodeRoot = node && getRootNode(node);\n    var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;\n    // in some cases, a detached node will return itself as the root instead of a document or\n    //  shadow root object, in which case, we shouldn't try to look further up the host chain\n    var attached = false;\n    if (nodeRoot && nodeRoot !== node) {\n        var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;\n        attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));\n        while(!attached && nodeRootHost){\n            var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;\n            // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n            //  which means we need to get the host's host and check if that parent host is contained\n            //  in (i.e. attached to) the document\n            nodeRoot = getRootNode(nodeRootHost);\n            nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;\n            attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));\n        }\n    }\n    return attached;\n};\nvar isZeroArea = function isZeroArea(node) {\n    var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;\n    return width === 0 && height === 0;\n};\nvar isHidden = function isHidden(node, _ref) {\n    var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;\n    // NOTE: visibility will be `undefined` if node is detached from the document\n    //  (see notes about this further down), which means we will consider it visible\n    //  (this is legacy behavior from a very long way back)\n    // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n    //  _visibility_ check, not a _display_ check\n    if (getComputedStyle(node).visibility === \"hidden\") {\n        return true;\n    }\n    var isDirectSummary = matches.call(node, \"details>summary:first-of-type\");\n    var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n    if (matches.call(nodeUnderDetails, \"details:not([open]) *\")) {\n        return true;\n    }\n    if (!displayCheck || displayCheck === \"full\" || displayCheck === \"legacy-full\") {\n        if (typeof getShadowRoot === \"function\") {\n            // figure out if we should consider the node to be in an undisclosed shadow and use the\n            //  'non-zero-area' fallback\n            var originalNode = node;\n            while(node){\n                var parentElement = node.parentElement;\n                var rootNode = getRootNode(node);\n                if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n                ) {\n                    // node has an undisclosed shadow which means we can only treat it as a black box, so we\n                    //  fall back to a non-zero-area test\n                    return isZeroArea(node);\n                } else if (node.assignedSlot) {\n                    // iterate up slot\n                    node = node.assignedSlot;\n                } else if (!parentElement && rootNode !== node.ownerDocument) {\n                    // cross shadow boundary\n                    node = rootNode.host;\n                } else {\n                    // iterate up normal dom\n                    node = parentElement;\n                }\n            }\n            node = originalNode;\n        }\n        // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n        //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n        //  it might be a falsy value, which means shadow DOM support is disabled\n        // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n        //  now we can just test to see if it would normally be visible or not, provided it's\n        //  attached to the main document.\n        // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n        //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n        if (isNodeAttached(node)) {\n            // this works wherever the node is: if there's at least one client rect, it's\n            //  somehow displayed; it also covers the CSS 'display: contents' case where the\n            //  node itself is hidden in place of its contents; and there's no need to search\n            //  up the hierarchy either\n            return !node.getClientRects().length;\n        }\n        // Else, the node isn't attached to the document, which means the `getClientRects()`\n        //  API will __always__ return zero rects (this can happen, for example, if React\n        //  is used to render nodes onto a detached tree, as confirmed in this thread:\n        //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n        //\n        // It also means that even window.getComputedStyle(node).display will return `undefined`\n        //  because styles are only computed for nodes that are in the document.\n        //\n        // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n        //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n        //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n        //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n        //  considering __everything__ to be visible because of the innability to determine styles.\n        //\n        // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n        //  nodes as visible with the 'none' fallback.__\n        if (displayCheck !== \"legacy-full\") {\n            return true; // hidden\n        }\n    // else, fallback to 'none' mode and consider the node visible\n    } else if (displayCheck === \"non-zero-area\") {\n        // NOTE: Even though this tests that the node's client rect is non-zero to determine\n        //  whether it's displayed, and that a detached node will __always__ have a zero-area\n        //  client rect, we don't special-case for whether the node is attached or not. In\n        //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n        //  times, and that includes attached or not.\n        return isZeroArea(node);\n    }\n    // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n    //  it's visible\n    return false;\n};\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n    if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n        var parentNode = node.parentElement;\n        // check if `node` is contained in a disabled <fieldset>\n        while(parentNode){\n            if (parentNode.tagName === \"FIELDSET\" && parentNode.disabled) {\n                // look for the first <legend> among the children of the disabled <fieldset>\n                for(var i = 0; i < parentNode.children.length; i++){\n                    var child = parentNode.children.item(i);\n                    // when the first <legend> (in document order) is found\n                    if (child.tagName === \"LEGEND\") {\n                        // if its parent <fieldset> is not nested in another disabled <fieldset>,\n                        // return whether `node` is a descendant of its first <legend>\n                        return matches.call(parentNode, \"fieldset[disabled] *\") ? true : !child.contains(node);\n                    }\n                }\n                // the disabled <fieldset> containing `node` has no <legend>\n                return true;\n            }\n            parentNode = parentNode.parentElement;\n        }\n    }\n    // else, node's tabbable/focusable state should not be affected by a fieldset's\n    //  enabled/disabled state\n    return false;\n};\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n    if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor\n    //  because we're limited in the type of selectors we can use in JSDom (see related\n    //  note related to `candidateSelectors`)\n    isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n        return false;\n    }\n    return true;\n};\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n    if (isNonTabbableRadio(node) || getTabindex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n        return false;\n    }\n    return true;\n};\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n    var tabIndex = parseInt(shadowHostNode.getAttribute(\"tabindex\"), 10);\n    if (isNaN(tabIndex) || tabIndex >= 0) {\n        return true;\n    }\n    // If a custom element has an explicit negative tabindex,\n    // browsers will not allow tab targeting said element's children.\n    return false;\n};\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */ var sortByOrder = function sortByOrder(candidates) {\n    var regularTabbables = [];\n    var orderedTabbables = [];\n    candidates.forEach(function(item, i) {\n        var isScope = !!item.scopeParent;\n        var element = isScope ? item.scopeParent : item;\n        var candidateTabindex = getTabindex(element, isScope);\n        var elements = isScope ? sortByOrder(item.candidates) : element;\n        if (candidateTabindex === 0) {\n            isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n        } else {\n            orderedTabbables.push({\n                documentOrder: i,\n                tabIndex: candidateTabindex,\n                item: item,\n                isScope: isScope,\n                content: elements\n            });\n        }\n    });\n    return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {\n        sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n        return acc;\n    }, []).concat(regularTabbables);\n};\nvar tabbable = function tabbable(el, options) {\n    options = options || {};\n    var candidates;\n    if (options.getShadowRoot) {\n        candidates = getCandidatesIteratively([\n            el\n        ], options.includeContainer, {\n            filter: isNodeMatchingSelectorTabbable.bind(null, options),\n            flatten: false,\n            getShadowRoot: options.getShadowRoot,\n            shadowRootFilter: isValidShadowRootTabbable\n        });\n    } else {\n        candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n    }\n    return sortByOrder(candidates);\n};\nvar focusable = function focusable(el, options) {\n    options = options || {};\n    var candidates;\n    if (options.getShadowRoot) {\n        candidates = getCandidatesIteratively([\n            el\n        ], options.includeContainer, {\n            filter: isNodeMatchingSelectorFocusable.bind(null, options),\n            flatten: true,\n            getShadowRoot: options.getShadowRoot\n        });\n    } else {\n        candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n    }\n    return candidates;\n};\nvar isTabbable = function isTabbable(node, options) {\n    options = options || {};\n    if (!node) {\n        throw new Error(\"No node provided\");\n    }\n    if (matches.call(node, candidateSelector) === false) {\n        return false;\n    }\n    return isNodeMatchingSelectorTabbable(options, node);\n};\nvar focusableCandidateSelector = /* #__PURE__ */ candidateSelectors.concat(\"iframe\").join(\",\");\nvar isFocusable = function isFocusable(node, options) {\n    options = options || {};\n    if (!node) {\n        throw new Error(\"No node provided\");\n    }\n    if (matches.call(node, focusableCandidateSelector) === false) {\n        return false;\n    }\n    return isNodeMatchingSelectorFocusable(options, node);\n};\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tabbable/dist/index.esm.js\n");

/***/ })

};
;