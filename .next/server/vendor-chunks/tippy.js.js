"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tippy.js";
exports.ids = ["vendor-chunks/tippy.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/tippy.js/dist/tippy.esm.js":
/*!*************************************************!*\
  !*** ./node_modules/tippy.js/dist/tippy.esm.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   animateFill: () => (/* binding */ animateFill),\n/* harmony export */   createSingleton: () => (/* binding */ createSingleton),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   delegate: () => (/* binding */ delegate),\n/* harmony export */   followCursor: () => (/* binding */ followCursor),\n/* harmony export */   hideAll: () => (/* binding */ hideAll),\n/* harmony export */   inlinePositioning: () => (/* binding */ inlinePositioning),\n/* harmony export */   roundArrow: () => (/* binding */ ROUND_ARROW),\n/* harmony export */   sticky: () => (/* binding */ sticky)\n/* harmony export */ });\n/* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @popperjs/core */ \"(ssr)/./node_modules/@popperjs/core/lib/popper.js\");\n/* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @popperjs/core */ \"(ssr)/./node_modules/@popperjs/core/lib/modifiers/applyStyles.js\");\n/**!\n* tippy.js v6.3.7\n* (c) 2017-2021 atomiks\n* MIT License\n*/ \nvar ROUND_ARROW = '<svg width=\"16\" height=\"6\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z\"></svg>';\nvar BOX_CLASS = \"tippy-box\";\nvar CONTENT_CLASS = \"tippy-content\";\nvar BACKDROP_CLASS = \"tippy-backdrop\";\nvar ARROW_CLASS = \"tippy-arrow\";\nvar SVG_ARROW_CLASS = \"tippy-svg-arrow\";\nvar TOUCH_OPTIONS = {\n    passive: true,\n    capture: true\n};\nvar TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO() {\n    return document.body;\n};\nfunction hasOwnProperty(obj, key) {\n    return ({}).hasOwnProperty.call(obj, key);\n}\nfunction getValueAtIndexOrReturn(value, index, defaultValue) {\n    if (Array.isArray(value)) {\n        var v = value[index];\n        return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;\n    }\n    return value;\n}\nfunction isType(value, type) {\n    var str = ({}).toString.call(value);\n    return str.indexOf(\"[object\") === 0 && str.indexOf(type + \"]\") > -1;\n}\nfunction invokeWithArgsOrReturn(value, args) {\n    return typeof value === \"function\" ? value.apply(void 0, args) : value;\n}\nfunction debounce(fn, ms) {\n    // Avoid wrapping in `setTimeout` if ms is 0 anyway\n    if (ms === 0) {\n        return fn;\n    }\n    var timeout;\n    return function(arg) {\n        clearTimeout(timeout);\n        timeout = setTimeout(function() {\n            fn(arg);\n        }, ms);\n    };\n}\nfunction removeProperties(obj, keys) {\n    var clone = Object.assign({}, obj);\n    keys.forEach(function(key) {\n        delete clone[key];\n    });\n    return clone;\n}\nfunction splitBySpaces(value) {\n    return value.split(/\\s+/).filter(Boolean);\n}\nfunction normalizeToArray(value) {\n    return [].concat(value);\n}\nfunction pushIfUnique(arr, value) {\n    if (arr.indexOf(value) === -1) {\n        arr.push(value);\n    }\n}\nfunction unique(arr) {\n    return arr.filter(function(item, index) {\n        return arr.indexOf(item) === index;\n    });\n}\nfunction getBasePlacement(placement) {\n    return placement.split(\"-\")[0];\n}\nfunction arrayFrom(value) {\n    return [].slice.call(value);\n}\nfunction removeUndefinedProps(obj) {\n    return Object.keys(obj).reduce(function(acc, key) {\n        if (obj[key] !== undefined) {\n            acc[key] = obj[key];\n        }\n        return acc;\n    }, {});\n}\nfunction div() {\n    return document.createElement(\"div\");\n}\nfunction isElement(value) {\n    return [\n        \"Element\",\n        \"Fragment\"\n    ].some(function(type) {\n        return isType(value, type);\n    });\n}\nfunction isNodeList(value) {\n    return isType(value, \"NodeList\");\n}\nfunction isMouseEvent(value) {\n    return isType(value, \"MouseEvent\");\n}\nfunction isReferenceElement(value) {\n    return !!(value && value._tippy && value._tippy.reference === value);\n}\nfunction getArrayOfElements(value) {\n    if (isElement(value)) {\n        return [\n            value\n        ];\n    }\n    if (isNodeList(value)) {\n        return arrayFrom(value);\n    }\n    if (Array.isArray(value)) {\n        return value;\n    }\n    return arrayFrom(document.querySelectorAll(value));\n}\nfunction setTransitionDuration(els, value) {\n    els.forEach(function(el) {\n        if (el) {\n            el.style.transitionDuration = value + \"ms\";\n        }\n    });\n}\nfunction setVisibilityState(els, state) {\n    els.forEach(function(el) {\n        if (el) {\n            el.setAttribute(\"data-state\", state);\n        }\n    });\n}\nfunction getOwnerDocument(elementOrElements) {\n    var _element$ownerDocumen;\n    var _normalizeToArray = normalizeToArray(elementOrElements), element = _normalizeToArray[0]; // Elements created via a <template> have an ownerDocument with no reference to the body\n    return element != null && (_element$ownerDocumen = element.ownerDocument) != null && _element$ownerDocumen.body ? element.ownerDocument : document;\n}\nfunction isCursorOutsideInteractiveBorder(popperTreeData, event) {\n    var clientX = event.clientX, clientY = event.clientY;\n    return popperTreeData.every(function(_ref) {\n        var popperRect = _ref.popperRect, popperState = _ref.popperState, props = _ref.props;\n        var interactiveBorder = props.interactiveBorder;\n        var basePlacement = getBasePlacement(popperState.placement);\n        var offsetData = popperState.modifiersData.offset;\n        if (!offsetData) {\n            return true;\n        }\n        var topDistance = basePlacement === \"bottom\" ? offsetData.top.y : 0;\n        var bottomDistance = basePlacement === \"top\" ? offsetData.bottom.y : 0;\n        var leftDistance = basePlacement === \"right\" ? offsetData.left.x : 0;\n        var rightDistance = basePlacement === \"left\" ? offsetData.right.x : 0;\n        var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;\n        var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;\n        var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;\n        var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;\n        return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;\n    });\n}\nfunction updateTransitionEndListener(box, action, listener) {\n    var method = action + \"EventListener\"; // some browsers apparently support `transition` (unprefixed) but only fire\n    // `webkitTransitionEnd`...\n    [\n        \"transitionend\",\n        \"webkitTransitionEnd\"\n    ].forEach(function(event) {\n        box[method](event, listener);\n    });\n}\n/**\n * Compared to xxx.contains, this function works for dom structures with shadow\n * dom\n */ function actualContains(parent, child) {\n    var target = child;\n    while(target){\n        var _target$getRootNode;\n        if (parent.contains(target)) {\n            return true;\n        }\n        target = target.getRootNode == null ? void 0 : (_target$getRootNode = target.getRootNode()) == null ? void 0 : _target$getRootNode.host;\n    }\n    return false;\n}\nvar currentInput = {\n    isTouch: false\n};\nvar lastMouseMoveTime = 0;\n/**\n * When a `touchstart` event is fired, it's assumed the user is using touch\n * input. We'll bind a `mousemove` event listener to listen for mouse input in\n * the future. This way, the `isTouch` property is fully dynamic and will handle\n * hybrid devices that use a mix of touch + mouse input.\n */ function onDocumentTouchStart() {\n    if (currentInput.isTouch) {\n        return;\n    }\n    currentInput.isTouch = true;\n    if (window.performance) {\n        document.addEventListener(\"mousemove\", onDocumentMouseMove);\n    }\n}\n/**\n * When two `mousemove` event are fired consecutively within 20ms, it's assumed\n * the user is using mouse input again. `mousemove` can fire on touch devices as\n * well, but very rarely that quickly.\n */ function onDocumentMouseMove() {\n    var now = performance.now();\n    if (now - lastMouseMoveTime < 20) {\n        currentInput.isTouch = false;\n        document.removeEventListener(\"mousemove\", onDocumentMouseMove);\n    }\n    lastMouseMoveTime = now;\n}\n/**\n * When an element is in focus and has a tippy, leaving the tab/window and\n * returning causes it to show again. For mouse users this is unexpected, but\n * for keyboard use it makes sense.\n * TODO: find a better technique to solve this problem\n */ function onWindowBlur() {\n    var activeElement = document.activeElement;\n    if (isReferenceElement(activeElement)) {\n        var instance = activeElement._tippy;\n        if (activeElement.blur && !instance.state.isVisible) {\n            activeElement.blur();\n        }\n    }\n}\nfunction bindGlobalEventListeners() {\n    document.addEventListener(\"touchstart\", onDocumentTouchStart, TOUCH_OPTIONS);\n    window.addEventListener(\"blur\", onWindowBlur);\n}\nvar isBrowser =  false && 0;\nvar isIE11 = isBrowser ? !!window.msCrypto : false;\nfunction createMemoryLeakWarning(method) {\n    var txt = method === \"destroy\" ? \"n already-\" : \" \";\n    return [\n        method + \"() was called on a\" + txt + \"destroyed instance. This is a no-op but\",\n        \"indicates a potential memory leak.\"\n    ].join(\" \");\n}\nfunction clean(value) {\n    var spacesAndTabs = /[ \\t]{2,}/g;\n    var lineStartWithSpaces = /^[ \\t]*/gm;\n    return value.replace(spacesAndTabs, \" \").replace(lineStartWithSpaces, \"\").trim();\n}\nfunction getDevMessage(message) {\n    return clean(\"\\n  %ctippy.js\\n\\n  %c\" + clean(message) + \"\\n\\n  %c\\uD83D\\uDC77‍ This is a development-only message. It will be removed in production.\\n  \");\n}\nfunction getFormattedMessage(message) {\n    return [\n        getDevMessage(message),\n        \"color: #00C584; font-size: 1.3em; font-weight: bold;\",\n        \"line-height: 1.5\",\n        \"color: #a6a095;\"\n    ];\n} // Assume warnings and errors never have the same message\nvar visitedMessages;\nif (true) {\n    resetVisitedMessages();\n}\nfunction resetVisitedMessages() {\n    visitedMessages = new Set();\n}\nfunction warnWhen(condition, message) {\n    if (condition && !visitedMessages.has(message)) {\n        var _console;\n        visitedMessages.add(message);\n        (_console = console).warn.apply(_console, getFormattedMessage(message));\n    }\n}\nfunction errorWhen(condition, message) {\n    if (condition && !visitedMessages.has(message)) {\n        var _console2;\n        visitedMessages.add(message);\n        (_console2 = console).error.apply(_console2, getFormattedMessage(message));\n    }\n}\nfunction validateTargets(targets) {\n    var didPassFalsyValue = !targets;\n    var didPassPlainObject = Object.prototype.toString.call(targets) === \"[object Object]\" && !targets.addEventListener;\n    errorWhen(didPassFalsyValue, [\n        \"tippy() was passed\",\n        \"`\" + String(targets) + \"`\",\n        \"as its targets (first) argument. Valid types are: String, Element,\",\n        \"Element[], or NodeList.\"\n    ].join(\" \"));\n    errorWhen(didPassPlainObject, [\n        \"tippy() was passed a plain object which is not supported as an argument\",\n        \"for virtual positioning. Use props.getReferenceClientRect instead.\"\n    ].join(\" \"));\n}\nvar pluginProps = {\n    animateFill: false,\n    followCursor: false,\n    inlinePositioning: false,\n    sticky: false\n};\nvar renderProps = {\n    allowHTML: false,\n    animation: \"fade\",\n    arrow: true,\n    content: \"\",\n    inertia: false,\n    maxWidth: 350,\n    role: \"tooltip\",\n    theme: \"\",\n    zIndex: 9999\n};\nvar defaultProps = Object.assign({\n    appendTo: TIPPY_DEFAULT_APPEND_TO,\n    aria: {\n        content: \"auto\",\n        expanded: \"auto\"\n    },\n    delay: 0,\n    duration: [\n        300,\n        250\n    ],\n    getReferenceClientRect: null,\n    hideOnClick: true,\n    ignoreAttributes: false,\n    interactive: false,\n    interactiveBorder: 2,\n    interactiveDebounce: 0,\n    moveTransition: \"\",\n    offset: [\n        0,\n        10\n    ],\n    onAfterUpdate: function onAfterUpdate() {},\n    onBeforeUpdate: function onBeforeUpdate() {},\n    onCreate: function onCreate() {},\n    onDestroy: function onDestroy() {},\n    onHidden: function onHidden() {},\n    onHide: function onHide() {},\n    onMount: function onMount() {},\n    onShow: function onShow() {},\n    onShown: function onShown() {},\n    onTrigger: function onTrigger() {},\n    onUntrigger: function onUntrigger() {},\n    onClickOutside: function onClickOutside() {},\n    placement: \"top\",\n    plugins: [],\n    popperOptions: {},\n    render: null,\n    showOnCreate: false,\n    touch: true,\n    trigger: \"mouseenter focus\",\n    triggerTarget: null\n}, pluginProps, renderProps);\nvar defaultKeys = Object.keys(defaultProps);\nvar setDefaultProps = function setDefaultProps(partialProps) {\n    /* istanbul ignore else */ if (true) {\n        validateProps(partialProps, []);\n    }\n    var keys = Object.keys(partialProps);\n    keys.forEach(function(key) {\n        defaultProps[key] = partialProps[key];\n    });\n};\nfunction getExtendedPassedProps(passedProps) {\n    var plugins = passedProps.plugins || [];\n    var pluginProps = plugins.reduce(function(acc, plugin) {\n        var name = plugin.name, defaultValue = plugin.defaultValue;\n        if (name) {\n            var _name;\n            acc[name] = passedProps[name] !== undefined ? passedProps[name] : (_name = defaultProps[name]) != null ? _name : defaultValue;\n        }\n        return acc;\n    }, {});\n    return Object.assign({}, passedProps, pluginProps);\n}\nfunction getDataAttributeProps(reference, plugins) {\n    var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {\n        plugins: plugins\n    }))) : defaultKeys;\n    var props = propKeys.reduce(function(acc, key) {\n        var valueAsString = (reference.getAttribute(\"data-tippy-\" + key) || \"\").trim();\n        if (!valueAsString) {\n            return acc;\n        }\n        if (key === \"content\") {\n            acc[key] = valueAsString;\n        } else {\n            try {\n                acc[key] = JSON.parse(valueAsString);\n            } catch (e) {\n                acc[key] = valueAsString;\n            }\n        }\n        return acc;\n    }, {});\n    return props;\n}\nfunction evaluateProps(reference, props) {\n    var out = Object.assign({}, props, {\n        content: invokeWithArgsOrReturn(props.content, [\n            reference\n        ])\n    }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));\n    out.aria = Object.assign({}, defaultProps.aria, out.aria);\n    out.aria = {\n        expanded: out.aria.expanded === \"auto\" ? props.interactive : out.aria.expanded,\n        content: out.aria.content === \"auto\" ? props.interactive ? null : \"describedby\" : out.aria.content\n    };\n    return out;\n}\nfunction validateProps(partialProps, plugins) {\n    if (partialProps === void 0) {\n        partialProps = {};\n    }\n    if (plugins === void 0) {\n        plugins = [];\n    }\n    var keys = Object.keys(partialProps);\n    keys.forEach(function(prop) {\n        var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));\n        var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop); // Check if the prop exists in `plugins`\n        if (didPassUnknownProp) {\n            didPassUnknownProp = plugins.filter(function(plugin) {\n                return plugin.name === prop;\n            }).length === 0;\n        }\n        warnWhen(didPassUnknownProp, [\n            \"`\" + prop + \"`\",\n            \"is not a valid prop. You may have spelled it incorrectly, or if it's\",\n            \"a plugin, forgot to pass it in an array as props.plugins.\",\n            \"\\n\\n\",\n            \"All props: https://atomiks.github.io/tippyjs/v6/all-props/\\n\",\n            \"Plugins: https://atomiks.github.io/tippyjs/v6/plugins/\"\n        ].join(\" \"));\n    });\n}\nvar innerHTML = function innerHTML() {\n    return \"innerHTML\";\n};\nfunction dangerouslySetInnerHTML(element, html) {\n    element[innerHTML()] = html;\n}\nfunction createArrowElement(value) {\n    var arrow = div();\n    if (value === true) {\n        arrow.className = ARROW_CLASS;\n    } else {\n        arrow.className = SVG_ARROW_CLASS;\n        if (isElement(value)) {\n            arrow.appendChild(value);\n        } else {\n            dangerouslySetInnerHTML(arrow, value);\n        }\n    }\n    return arrow;\n}\nfunction setContent(content, props) {\n    if (isElement(props.content)) {\n        dangerouslySetInnerHTML(content, \"\");\n        content.appendChild(props.content);\n    } else if (typeof props.content !== \"function\") {\n        if (props.allowHTML) {\n            dangerouslySetInnerHTML(content, props.content);\n        } else {\n            content.textContent = props.content;\n        }\n    }\n}\nfunction getChildren(popper) {\n    var box = popper.firstElementChild;\n    var boxChildren = arrayFrom(box.children);\n    return {\n        box: box,\n        content: boxChildren.find(function(node) {\n            return node.classList.contains(CONTENT_CLASS);\n        }),\n        arrow: boxChildren.find(function(node) {\n            return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);\n        }),\n        backdrop: boxChildren.find(function(node) {\n            return node.classList.contains(BACKDROP_CLASS);\n        })\n    };\n}\nfunction render(instance) {\n    var popper = div();\n    var box = div();\n    box.className = BOX_CLASS;\n    box.setAttribute(\"data-state\", \"hidden\");\n    box.setAttribute(\"tabindex\", \"-1\");\n    var content = div();\n    content.className = CONTENT_CLASS;\n    content.setAttribute(\"data-state\", \"hidden\");\n    setContent(content, instance.props);\n    popper.appendChild(box);\n    box.appendChild(content);\n    onUpdate(instance.props, instance.props);\n    function onUpdate(prevProps, nextProps) {\n        var _getChildren = getChildren(popper), box = _getChildren.box, content = _getChildren.content, arrow = _getChildren.arrow;\n        if (nextProps.theme) {\n            box.setAttribute(\"data-theme\", nextProps.theme);\n        } else {\n            box.removeAttribute(\"data-theme\");\n        }\n        if (typeof nextProps.animation === \"string\") {\n            box.setAttribute(\"data-animation\", nextProps.animation);\n        } else {\n            box.removeAttribute(\"data-animation\");\n        }\n        if (nextProps.inertia) {\n            box.setAttribute(\"data-inertia\", \"\");\n        } else {\n            box.removeAttribute(\"data-inertia\");\n        }\n        box.style.maxWidth = typeof nextProps.maxWidth === \"number\" ? nextProps.maxWidth + \"px\" : nextProps.maxWidth;\n        if (nextProps.role) {\n            box.setAttribute(\"role\", nextProps.role);\n        } else {\n            box.removeAttribute(\"role\");\n        }\n        if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {\n            setContent(content, instance.props);\n        }\n        if (nextProps.arrow) {\n            if (!arrow) {\n                box.appendChild(createArrowElement(nextProps.arrow));\n            } else if (prevProps.arrow !== nextProps.arrow) {\n                box.removeChild(arrow);\n                box.appendChild(createArrowElement(nextProps.arrow));\n            }\n        } else if (arrow) {\n            box.removeChild(arrow);\n        }\n    }\n    return {\n        popper: popper,\n        onUpdate: onUpdate\n    };\n} // Runtime check to identify if the render function is the default one; this\n// way we can apply default CSS transitions logic and it can be tree-shaken away\nrender.$$tippy = true;\nvar idCounter = 1;\nvar mouseMoveListeners = []; // Used by `hideAll()`\nvar mountedInstances = [];\nfunction createTippy(reference, passedProps) {\n    var props = evaluateProps(reference, Object.assign({}, defaultProps, getExtendedPassedProps(removeUndefinedProps(passedProps)))); // ===========================================================================\n    // 🔒 Private members\n    // ===========================================================================\n    var showTimeout;\n    var hideTimeout;\n    var scheduleHideAnimationFrame;\n    var isVisibleFromClick = false;\n    var didHideDueToDocumentMouseDown = false;\n    var didTouchMove = false;\n    var ignoreOnFirstUpdate = false;\n    var lastTriggerEvent;\n    var currentTransitionEndListener;\n    var onFirstUpdate;\n    var listeners = [];\n    var debouncedOnMouseMove = debounce(onMouseMove, props.interactiveDebounce);\n    var currentTarget; // ===========================================================================\n    // 🔑 Public members\n    // ===========================================================================\n    var id = idCounter++;\n    var popperInstance = null;\n    var plugins = unique(props.plugins);\n    var state = {\n        // Is the instance currently enabled?\n        isEnabled: true,\n        // Is the tippy currently showing and not transitioning out?\n        isVisible: false,\n        // Has the instance been destroyed?\n        isDestroyed: false,\n        // Is the tippy currently mounted to the DOM?\n        isMounted: false,\n        // Has the tippy finished transitioning in?\n        isShown: false\n    };\n    var instance = {\n        // properties\n        id: id,\n        reference: reference,\n        popper: div(),\n        popperInstance: popperInstance,\n        props: props,\n        state: state,\n        plugins: plugins,\n        // methods\n        clearDelayTimeouts: clearDelayTimeouts,\n        setProps: setProps,\n        setContent: setContent,\n        show: show,\n        hide: hide,\n        hideWithInteractivity: hideWithInteractivity,\n        enable: enable,\n        disable: disable,\n        unmount: unmount,\n        destroy: destroy\n    }; // TODO: Investigate why this early return causes a TDZ error in the tests —\n    // it doesn't seem to happen in the browser\n    /* istanbul ignore if */ if (!props.render) {\n        if (true) {\n            errorWhen(true, \"render() function has not been supplied.\");\n        }\n        return instance;\n    } // ===========================================================================\n    // Initial mutations\n    // ===========================================================================\n    var _props$render = props.render(instance), popper = _props$render.popper, onUpdate = _props$render.onUpdate;\n    popper.setAttribute(\"data-tippy-root\", \"\");\n    popper.id = \"tippy-\" + instance.id;\n    instance.popper = popper;\n    reference._tippy = instance;\n    popper._tippy = instance;\n    var pluginsHooks = plugins.map(function(plugin) {\n        return plugin.fn(instance);\n    });\n    var hasAriaExpanded = reference.hasAttribute(\"aria-expanded\");\n    addListeners();\n    handleAriaExpandedAttribute();\n    handleStyles();\n    invokeHook(\"onCreate\", [\n        instance\n    ]);\n    if (props.showOnCreate) {\n        scheduleShow();\n    } // Prevent a tippy with a delay from hiding if the cursor left then returned\n    // before it started hiding\n    popper.addEventListener(\"mouseenter\", function() {\n        if (instance.props.interactive && instance.state.isVisible) {\n            instance.clearDelayTimeouts();\n        }\n    });\n    popper.addEventListener(\"mouseleave\", function() {\n        if (instance.props.interactive && instance.props.trigger.indexOf(\"mouseenter\") >= 0) {\n            getDocument().addEventListener(\"mousemove\", debouncedOnMouseMove);\n        }\n    });\n    return instance; // ===========================================================================\n    // 🔒 Private methods\n    // ===========================================================================\n    function getNormalizedTouchSettings() {\n        var touch = instance.props.touch;\n        return Array.isArray(touch) ? touch : [\n            touch,\n            0\n        ];\n    }\n    function getIsCustomTouchBehavior() {\n        return getNormalizedTouchSettings()[0] === \"hold\";\n    }\n    function getIsDefaultRenderFn() {\n        var _instance$props$rende;\n        // @ts-ignore\n        return !!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy);\n    }\n    function getCurrentTarget() {\n        return currentTarget || reference;\n    }\n    function getDocument() {\n        var parent = getCurrentTarget().parentNode;\n        return parent ? getOwnerDocument(parent) : document;\n    }\n    function getDefaultTemplateChildren() {\n        return getChildren(popper);\n    }\n    function getDelay(isShow) {\n        // For touch or keyboard input, force `0` delay for UX reasons\n        // Also if the instance is mounted but not visible (transitioning out),\n        // ignore delay\n        if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === \"focus\") {\n            return 0;\n        }\n        return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);\n    }\n    function handleStyles(fromHide) {\n        if (fromHide === void 0) {\n            fromHide = false;\n        }\n        popper.style.pointerEvents = instance.props.interactive && !fromHide ? \"\" : \"none\";\n        popper.style.zIndex = \"\" + instance.props.zIndex;\n    }\n    function invokeHook(hook, args, shouldInvokePropsHook) {\n        if (shouldInvokePropsHook === void 0) {\n            shouldInvokePropsHook = true;\n        }\n        pluginsHooks.forEach(function(pluginHooks) {\n            if (pluginHooks[hook]) {\n                pluginHooks[hook].apply(pluginHooks, args);\n            }\n        });\n        if (shouldInvokePropsHook) {\n            var _instance$props;\n            (_instance$props = instance.props)[hook].apply(_instance$props, args);\n        }\n    }\n    function handleAriaContentAttribute() {\n        var aria = instance.props.aria;\n        if (!aria.content) {\n            return;\n        }\n        var attr = \"aria-\" + aria.content;\n        var id = popper.id;\n        var nodes = normalizeToArray(instance.props.triggerTarget || reference);\n        nodes.forEach(function(node) {\n            var currentValue = node.getAttribute(attr);\n            if (instance.state.isVisible) {\n                node.setAttribute(attr, currentValue ? currentValue + \" \" + id : id);\n            } else {\n                var nextValue = currentValue && currentValue.replace(id, \"\").trim();\n                if (nextValue) {\n                    node.setAttribute(attr, nextValue);\n                } else {\n                    node.removeAttribute(attr);\n                }\n            }\n        });\n    }\n    function handleAriaExpandedAttribute() {\n        if (hasAriaExpanded || !instance.props.aria.expanded) {\n            return;\n        }\n        var nodes = normalizeToArray(instance.props.triggerTarget || reference);\n        nodes.forEach(function(node) {\n            if (instance.props.interactive) {\n                node.setAttribute(\"aria-expanded\", instance.state.isVisible && node === getCurrentTarget() ? \"true\" : \"false\");\n            } else {\n                node.removeAttribute(\"aria-expanded\");\n            }\n        });\n    }\n    function cleanupInteractiveMouseListeners() {\n        getDocument().removeEventListener(\"mousemove\", debouncedOnMouseMove);\n        mouseMoveListeners = mouseMoveListeners.filter(function(listener) {\n            return listener !== debouncedOnMouseMove;\n        });\n    }\n    function onDocumentPress(event) {\n        // Moved finger to scroll instead of an intentional tap outside\n        if (currentInput.isTouch) {\n            if (didTouchMove || event.type === \"mousedown\") {\n                return;\n            }\n        }\n        var actualTarget = event.composedPath && event.composedPath()[0] || event.target; // Clicked on interactive popper\n        if (instance.props.interactive && actualContains(popper, actualTarget)) {\n            return;\n        } // Clicked on the event listeners target\n        if (normalizeToArray(instance.props.triggerTarget || reference).some(function(el) {\n            return actualContains(el, actualTarget);\n        })) {\n            if (currentInput.isTouch) {\n                return;\n            }\n            if (instance.state.isVisible && instance.props.trigger.indexOf(\"click\") >= 0) {\n                return;\n            }\n        } else {\n            invokeHook(\"onClickOutside\", [\n                instance,\n                event\n            ]);\n        }\n        if (instance.props.hideOnClick === true) {\n            instance.clearDelayTimeouts();\n            instance.hide(); // `mousedown` event is fired right before `focus` if pressing the\n            // currentTarget. This lets a tippy with `focus` trigger know that it\n            // should not show\n            didHideDueToDocumentMouseDown = true;\n            setTimeout(function() {\n                didHideDueToDocumentMouseDown = false;\n            }); // The listener gets added in `scheduleShow()`, but this may be hiding it\n            // before it shows, and hide()'s early bail-out behavior can prevent it\n            // from being cleaned up\n            if (!instance.state.isMounted) {\n                removeDocumentPress();\n            }\n        }\n    }\n    function onTouchMove() {\n        didTouchMove = true;\n    }\n    function onTouchStart() {\n        didTouchMove = false;\n    }\n    function addDocumentPress() {\n        var doc = getDocument();\n        doc.addEventListener(\"mousedown\", onDocumentPress, true);\n        doc.addEventListener(\"touchend\", onDocumentPress, TOUCH_OPTIONS);\n        doc.addEventListener(\"touchstart\", onTouchStart, TOUCH_OPTIONS);\n        doc.addEventListener(\"touchmove\", onTouchMove, TOUCH_OPTIONS);\n    }\n    function removeDocumentPress() {\n        var doc = getDocument();\n        doc.removeEventListener(\"mousedown\", onDocumentPress, true);\n        doc.removeEventListener(\"touchend\", onDocumentPress, TOUCH_OPTIONS);\n        doc.removeEventListener(\"touchstart\", onTouchStart, TOUCH_OPTIONS);\n        doc.removeEventListener(\"touchmove\", onTouchMove, TOUCH_OPTIONS);\n    }\n    function onTransitionedOut(duration, callback) {\n        onTransitionEnd(duration, function() {\n            if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {\n                callback();\n            }\n        });\n    }\n    function onTransitionedIn(duration, callback) {\n        onTransitionEnd(duration, callback);\n    }\n    function onTransitionEnd(duration, callback) {\n        var box = getDefaultTemplateChildren().box;\n        function listener(event) {\n            if (event.target === box) {\n                updateTransitionEndListener(box, \"remove\", listener);\n                callback();\n            }\n        } // Make callback synchronous if duration is 0\n        // `transitionend` won't fire otherwise\n        if (duration === 0) {\n            return callback();\n        }\n        updateTransitionEndListener(box, \"remove\", currentTransitionEndListener);\n        updateTransitionEndListener(box, \"add\", listener);\n        currentTransitionEndListener = listener;\n    }\n    function on(eventType, handler, options) {\n        if (options === void 0) {\n            options = false;\n        }\n        var nodes = normalizeToArray(instance.props.triggerTarget || reference);\n        nodes.forEach(function(node) {\n            node.addEventListener(eventType, handler, options);\n            listeners.push({\n                node: node,\n                eventType: eventType,\n                handler: handler,\n                options: options\n            });\n        });\n    }\n    function addListeners() {\n        if (getIsCustomTouchBehavior()) {\n            on(\"touchstart\", onTrigger, {\n                passive: true\n            });\n            on(\"touchend\", onMouseLeave, {\n                passive: true\n            });\n        }\n        splitBySpaces(instance.props.trigger).forEach(function(eventType) {\n            if (eventType === \"manual\") {\n                return;\n            }\n            on(eventType, onTrigger);\n            switch(eventType){\n                case \"mouseenter\":\n                    on(\"mouseleave\", onMouseLeave);\n                    break;\n                case \"focus\":\n                    on(isIE11 ? \"focusout\" : \"blur\", onBlurOrFocusOut);\n                    break;\n                case \"focusin\":\n                    on(\"focusout\", onBlurOrFocusOut);\n                    break;\n            }\n        });\n    }\n    function removeListeners() {\n        listeners.forEach(function(_ref) {\n            var node = _ref.node, eventType = _ref.eventType, handler = _ref.handler, options = _ref.options;\n            node.removeEventListener(eventType, handler, options);\n        });\n        listeners = [];\n    }\n    function onTrigger(event) {\n        var _lastTriggerEvent;\n        var shouldScheduleClickHide = false;\n        if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {\n            return;\n        }\n        var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === \"focus\";\n        lastTriggerEvent = event;\n        currentTarget = event.currentTarget;\n        handleAriaExpandedAttribute();\n        if (!instance.state.isVisible && isMouseEvent(event)) {\n            // If scrolling, `mouseenter` events can be fired if the cursor lands\n            // over a new target, but `mousemove` events don't get fired. This\n            // causes interactive tooltips to get stuck open until the cursor is\n            // moved\n            mouseMoveListeners.forEach(function(listener) {\n                return listener(event);\n            });\n        } // Toggle show/hide when clicking click-triggered tooltips\n        if (event.type === \"click\" && (instance.props.trigger.indexOf(\"mouseenter\") < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {\n            shouldScheduleClickHide = true;\n        } else {\n            scheduleShow(event);\n        }\n        if (event.type === \"click\") {\n            isVisibleFromClick = !shouldScheduleClickHide;\n        }\n        if (shouldScheduleClickHide && !wasFocused) {\n            scheduleHide(event);\n        }\n    }\n    function onMouseMove(event) {\n        var target = event.target;\n        var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper.contains(target);\n        if (event.type === \"mousemove\" && isCursorOverReferenceOrPopper) {\n            return;\n        }\n        var popperTreeData = getNestedPopperTree().concat(popper).map(function(popper) {\n            var _instance$popperInsta;\n            var instance = popper._tippy;\n            var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;\n            if (state) {\n                return {\n                    popperRect: popper.getBoundingClientRect(),\n                    popperState: state,\n                    props: props\n                };\n            }\n            return null;\n        }).filter(Boolean);\n        if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {\n            cleanupInteractiveMouseListeners();\n            scheduleHide(event);\n        }\n    }\n    function onMouseLeave(event) {\n        var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf(\"click\") >= 0 && isVisibleFromClick;\n        if (shouldBail) {\n            return;\n        }\n        if (instance.props.interactive) {\n            instance.hideWithInteractivity(event);\n            return;\n        }\n        scheduleHide(event);\n    }\n    function onBlurOrFocusOut(event) {\n        if (instance.props.trigger.indexOf(\"focusin\") < 0 && event.target !== getCurrentTarget()) {\n            return;\n        } // If focus was moved to within the popper\n        if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {\n            return;\n        }\n        scheduleHide(event);\n    }\n    function isEventListenerStopped(event) {\n        return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf(\"touch\") >= 0 : false;\n    }\n    function createPopperInstance() {\n        destroyPopperInstance();\n        var _instance$props2 = instance.props, popperOptions = _instance$props2.popperOptions, placement = _instance$props2.placement, offset = _instance$props2.offset, getReferenceClientRect = _instance$props2.getReferenceClientRect, moveTransition = _instance$props2.moveTransition;\n        var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;\n        var computedReference = getReferenceClientRect ? {\n            getBoundingClientRect: getReferenceClientRect,\n            contextElement: getReferenceClientRect.contextElement || getCurrentTarget()\n        } : reference;\n        var tippyModifier = {\n            name: \"$$tippy\",\n            enabled: true,\n            phase: \"beforeWrite\",\n            requires: [\n                \"computeStyles\"\n            ],\n            fn: function fn(_ref2) {\n                var state = _ref2.state;\n                if (getIsDefaultRenderFn()) {\n                    var _getDefaultTemplateCh = getDefaultTemplateChildren(), box = _getDefaultTemplateCh.box;\n                    [\n                        \"placement\",\n                        \"reference-hidden\",\n                        \"escaped\"\n                    ].forEach(function(attr) {\n                        if (attr === \"placement\") {\n                            box.setAttribute(\"data-placement\", state.placement);\n                        } else {\n                            if (state.attributes.popper[\"data-popper-\" + attr]) {\n                                box.setAttribute(\"data-\" + attr, \"\");\n                            } else {\n                                box.removeAttribute(\"data-\" + attr);\n                            }\n                        }\n                    });\n                    state.attributes.popper = {};\n                }\n            }\n        };\n        var modifiers = [\n            {\n                name: \"offset\",\n                options: {\n                    offset: offset\n                }\n            },\n            {\n                name: \"preventOverflow\",\n                options: {\n                    padding: {\n                        top: 2,\n                        bottom: 2,\n                        left: 5,\n                        right: 5\n                    }\n                }\n            },\n            {\n                name: \"flip\",\n                options: {\n                    padding: 5\n                }\n            },\n            {\n                name: \"computeStyles\",\n                options: {\n                    adaptive: !moveTransition\n                }\n            },\n            tippyModifier\n        ];\n        if (getIsDefaultRenderFn() && arrow) {\n            modifiers.push({\n                name: \"arrow\",\n                options: {\n                    element: arrow,\n                    padding: 3\n                }\n            });\n        }\n        modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);\n        instance.popperInstance = (0,_popperjs_core__WEBPACK_IMPORTED_MODULE_0__.createPopper)(computedReference, popper, Object.assign({}, popperOptions, {\n            placement: placement,\n            onFirstUpdate: onFirstUpdate,\n            modifiers: modifiers\n        }));\n    }\n    function destroyPopperInstance() {\n        if (instance.popperInstance) {\n            instance.popperInstance.destroy();\n            instance.popperInstance = null;\n        }\n    }\n    function mount() {\n        var appendTo = instance.props.appendTo;\n        var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so\n        // it's directly after the reference element so the elements inside the\n        // tippy can be tabbed to\n        // If there are clipping issues, the user can specify a different appendTo\n        // and ensure focus management is handled correctly manually\n        var node = getCurrentTarget();\n        if (instance.props.interactive && appendTo === TIPPY_DEFAULT_APPEND_TO || appendTo === \"parent\") {\n            parentNode = node.parentNode;\n        } else {\n            parentNode = invokeWithArgsOrReturn(appendTo, [\n                node\n            ]);\n        } // The popper element needs to exist on the DOM before its position can be\n        // updated as Popper needs to read its dimensions\n        if (!parentNode.contains(popper)) {\n            parentNode.appendChild(popper);\n        }\n        instance.state.isMounted = true;\n        createPopperInstance();\n        /* istanbul ignore else */ if (true) {\n            // Accessibility check\n            warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper, [\n                \"Interactive tippy element may not be accessible via keyboard\",\n                \"navigation because it is not directly after the reference element\",\n                \"in the DOM source order.\",\n                \"\\n\\n\",\n                \"Using a wrapper <div> or <span> tag around the reference element\",\n                \"solves this by creating a new parentNode context.\",\n                \"\\n\\n\",\n                \"Specifying `appendTo: document.body` silences this warning, but it\",\n                \"assumes you are using a focus management solution to handle\",\n                \"keyboard navigation.\",\n                \"\\n\\n\",\n                \"See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity\"\n            ].join(\" \"));\n        }\n    }\n    function getNestedPopperTree() {\n        return arrayFrom(popper.querySelectorAll(\"[data-tippy-root]\"));\n    }\n    function scheduleShow(event) {\n        instance.clearDelayTimeouts();\n        if (event) {\n            invokeHook(\"onTrigger\", [\n                instance,\n                event\n            ]);\n        }\n        addDocumentPress();\n        var delay = getDelay(true);\n        var _getNormalizedTouchSe = getNormalizedTouchSettings(), touchValue = _getNormalizedTouchSe[0], touchDelay = _getNormalizedTouchSe[1];\n        if (currentInput.isTouch && touchValue === \"hold\" && touchDelay) {\n            delay = touchDelay;\n        }\n        if (delay) {\n            showTimeout = setTimeout(function() {\n                instance.show();\n            }, delay);\n        } else {\n            instance.show();\n        }\n    }\n    function scheduleHide(event) {\n        instance.clearDelayTimeouts();\n        invokeHook(\"onUntrigger\", [\n            instance,\n            event\n        ]);\n        if (!instance.state.isVisible) {\n            removeDocumentPress();\n            return;\n        } // For interactive tippies, scheduleHide is added to a document.body handler\n        // from onMouseLeave so must intercept scheduled hides from mousemove/leave\n        // events when trigger contains mouseenter and click, and the tip is\n        // currently shown as a result of a click.\n        if (instance.props.trigger.indexOf(\"mouseenter\") >= 0 && instance.props.trigger.indexOf(\"click\") >= 0 && [\n            \"mouseleave\",\n            \"mousemove\"\n        ].indexOf(event.type) >= 0 && isVisibleFromClick) {\n            return;\n        }\n        var delay = getDelay(false);\n        if (delay) {\n            hideTimeout = setTimeout(function() {\n                if (instance.state.isVisible) {\n                    instance.hide();\n                }\n            }, delay);\n        } else {\n            // Fixes a `transitionend` problem when it fires 1 frame too\n            // late sometimes, we don't want hide() to be called.\n            scheduleHideAnimationFrame = requestAnimationFrame(function() {\n                instance.hide();\n            });\n        }\n    } // ===========================================================================\n    // 🔑 Public methods\n    // ===========================================================================\n    function enable() {\n        instance.state.isEnabled = true;\n    }\n    function disable() {\n        // Disabling the instance should also hide it\n        // https://github.com/atomiks/tippy.js-react/issues/106\n        instance.hide();\n        instance.state.isEnabled = false;\n    }\n    function clearDelayTimeouts() {\n        clearTimeout(showTimeout);\n        clearTimeout(hideTimeout);\n        cancelAnimationFrame(scheduleHideAnimationFrame);\n    }\n    function setProps(partialProps) {\n        /* istanbul ignore else */ if (true) {\n            warnWhen(instance.state.isDestroyed, createMemoryLeakWarning(\"setProps\"));\n        }\n        if (instance.state.isDestroyed) {\n            return;\n        }\n        invokeHook(\"onBeforeUpdate\", [\n            instance,\n            partialProps\n        ]);\n        removeListeners();\n        var prevProps = instance.props;\n        var nextProps = evaluateProps(reference, Object.assign({}, prevProps, removeUndefinedProps(partialProps), {\n            ignoreAttributes: true\n        }));\n        instance.props = nextProps;\n        addListeners();\n        if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {\n            cleanupInteractiveMouseListeners();\n            debouncedOnMouseMove = debounce(onMouseMove, nextProps.interactiveDebounce);\n        } // Ensure stale aria-expanded attributes are removed\n        if (prevProps.triggerTarget && !nextProps.triggerTarget) {\n            normalizeToArray(prevProps.triggerTarget).forEach(function(node) {\n                node.removeAttribute(\"aria-expanded\");\n            });\n        } else if (nextProps.triggerTarget) {\n            reference.removeAttribute(\"aria-expanded\");\n        }\n        handleAriaExpandedAttribute();\n        handleStyles();\n        if (onUpdate) {\n            onUpdate(prevProps, nextProps);\n        }\n        if (instance.popperInstance) {\n            createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,\n            // and the nested ones get re-rendered first.\n            // https://github.com/atomiks/tippyjs-react/issues/177\n            // TODO: find a cleaner / more efficient solution(!)\n            getNestedPopperTree().forEach(function(nestedPopper) {\n                // React (and other UI libs likely) requires a rAF wrapper as it flushes\n                // its work in one\n                requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);\n            });\n        }\n        invokeHook(\"onAfterUpdate\", [\n            instance,\n            partialProps\n        ]);\n    }\n    function setContent(content) {\n        instance.setProps({\n            content: content\n        });\n    }\n    function show() {\n        /* istanbul ignore else */ if (true) {\n            warnWhen(instance.state.isDestroyed, createMemoryLeakWarning(\"show\"));\n        } // Early bail-out\n        var isAlreadyVisible = instance.state.isVisible;\n        var isDestroyed = instance.state.isDestroyed;\n        var isDisabled = !instance.state.isEnabled;\n        var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;\n        var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);\n        if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {\n            return;\n        } // Normalize `disabled` behavior across browsers.\n        // Firefox allows events on disabled elements, but Chrome doesn't.\n        // Using a wrapper element (i.e. <span>) is recommended.\n        if (getCurrentTarget().hasAttribute(\"disabled\")) {\n            return;\n        }\n        invokeHook(\"onShow\", [\n            instance\n        ], false);\n        if (instance.props.onShow(instance) === false) {\n            return;\n        }\n        instance.state.isVisible = true;\n        if (getIsDefaultRenderFn()) {\n            popper.style.visibility = \"visible\";\n        }\n        handleStyles();\n        addDocumentPress();\n        if (!instance.state.isMounted) {\n            popper.style.transition = \"none\";\n        } // If flipping to the opposite side after hiding at least once, the\n        // animation will use the wrong placement without resetting the duration\n        if (getIsDefaultRenderFn()) {\n            var _getDefaultTemplateCh2 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh2.box, content = _getDefaultTemplateCh2.content;\n            setTransitionDuration([\n                box,\n                content\n            ], 0);\n        }\n        onFirstUpdate = function onFirstUpdate() {\n            var _instance$popperInsta2;\n            if (!instance.state.isVisible || ignoreOnFirstUpdate) {\n                return;\n            }\n            ignoreOnFirstUpdate = true; // reflow\n            void popper.offsetHeight;\n            popper.style.transition = instance.props.moveTransition;\n            if (getIsDefaultRenderFn() && instance.props.animation) {\n                var _getDefaultTemplateCh3 = getDefaultTemplateChildren(), _box = _getDefaultTemplateCh3.box, _content = _getDefaultTemplateCh3.content;\n                setTransitionDuration([\n                    _box,\n                    _content\n                ], duration);\n                setVisibilityState([\n                    _box,\n                    _content\n                ], \"visible\");\n            }\n            handleAriaContentAttribute();\n            handleAriaExpandedAttribute();\n            pushIfUnique(mountedInstances, instance); // certain modifiers (e.g. `maxSize`) require a second update after the\n            // popper has been positioned for the first time\n            (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();\n            invokeHook(\"onMount\", [\n                instance\n            ]);\n            if (instance.props.animation && getIsDefaultRenderFn()) {\n                onTransitionedIn(duration, function() {\n                    instance.state.isShown = true;\n                    invokeHook(\"onShown\", [\n                        instance\n                    ]);\n                });\n            }\n        };\n        mount();\n    }\n    function hide() {\n        /* istanbul ignore else */ if (true) {\n            warnWhen(instance.state.isDestroyed, createMemoryLeakWarning(\"hide\"));\n        } // Early bail-out\n        var isAlreadyHidden = !instance.state.isVisible;\n        var isDestroyed = instance.state.isDestroyed;\n        var isDisabled = !instance.state.isEnabled;\n        var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);\n        if (isAlreadyHidden || isDestroyed || isDisabled) {\n            return;\n        }\n        invokeHook(\"onHide\", [\n            instance\n        ], false);\n        if (instance.props.onHide(instance) === false) {\n            return;\n        }\n        instance.state.isVisible = false;\n        instance.state.isShown = false;\n        ignoreOnFirstUpdate = false;\n        isVisibleFromClick = false;\n        if (getIsDefaultRenderFn()) {\n            popper.style.visibility = \"hidden\";\n        }\n        cleanupInteractiveMouseListeners();\n        removeDocumentPress();\n        handleStyles(true);\n        if (getIsDefaultRenderFn()) {\n            var _getDefaultTemplateCh4 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh4.box, content = _getDefaultTemplateCh4.content;\n            if (instance.props.animation) {\n                setTransitionDuration([\n                    box,\n                    content\n                ], duration);\n                setVisibilityState([\n                    box,\n                    content\n                ], \"hidden\");\n            }\n        }\n        handleAriaContentAttribute();\n        handleAriaExpandedAttribute();\n        if (instance.props.animation) {\n            if (getIsDefaultRenderFn()) {\n                onTransitionedOut(duration, instance.unmount);\n            }\n        } else {\n            instance.unmount();\n        }\n    }\n    function hideWithInteractivity(event) {\n        /* istanbul ignore else */ if (true) {\n            warnWhen(instance.state.isDestroyed, createMemoryLeakWarning(\"hideWithInteractivity\"));\n        }\n        getDocument().addEventListener(\"mousemove\", debouncedOnMouseMove);\n        pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);\n        debouncedOnMouseMove(event);\n    }\n    function unmount() {\n        /* istanbul ignore else */ if (true) {\n            warnWhen(instance.state.isDestroyed, createMemoryLeakWarning(\"unmount\"));\n        }\n        if (instance.state.isVisible) {\n            instance.hide();\n        }\n        if (!instance.state.isMounted) {\n            return;\n        }\n        destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper\n        // tree by default. This seems mainly for interactive tippies, but we should\n        // find a workaround if possible\n        getNestedPopperTree().forEach(function(nestedPopper) {\n            nestedPopper._tippy.unmount();\n        });\n        if (popper.parentNode) {\n            popper.parentNode.removeChild(popper);\n        }\n        mountedInstances = mountedInstances.filter(function(i) {\n            return i !== instance;\n        });\n        instance.state.isMounted = false;\n        invokeHook(\"onHidden\", [\n            instance\n        ]);\n    }\n    function destroy() {\n        /* istanbul ignore else */ if (true) {\n            warnWhen(instance.state.isDestroyed, createMemoryLeakWarning(\"destroy\"));\n        }\n        if (instance.state.isDestroyed) {\n            return;\n        }\n        instance.clearDelayTimeouts();\n        instance.unmount();\n        removeListeners();\n        delete reference._tippy;\n        instance.state.isDestroyed = true;\n        invokeHook(\"onDestroy\", [\n            instance\n        ]);\n    }\n}\nfunction tippy(targets, optionalProps) {\n    if (optionalProps === void 0) {\n        optionalProps = {};\n    }\n    var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);\n    /* istanbul ignore else */ if (true) {\n        validateTargets(targets);\n        validateProps(optionalProps, plugins);\n    }\n    bindGlobalEventListeners();\n    var passedProps = Object.assign({}, optionalProps, {\n        plugins: plugins\n    });\n    var elements = getArrayOfElements(targets);\n    /* istanbul ignore else */ if (true) {\n        var isSingleContentElement = isElement(passedProps.content);\n        var isMoreThanOneReferenceElement = elements.length > 1;\n        warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, [\n            \"tippy() was passed an Element as the `content` prop, but more than\",\n            \"one tippy instance was created by this invocation. This means the\",\n            \"content element will only be appended to the last tippy instance.\",\n            \"\\n\\n\",\n            \"Instead, pass the .innerHTML of the element, or use a function that\",\n            \"returns a cloned version of the element instead.\",\n            \"\\n\\n\",\n            \"1) content: element.innerHTML\\n\",\n            \"2) content: () => element.cloneNode(true)\"\n        ].join(\" \"));\n    }\n    var instances = elements.reduce(function(acc, reference) {\n        var instance = reference && createTippy(reference, passedProps);\n        if (instance) {\n            acc.push(instance);\n        }\n        return acc;\n    }, []);\n    return isElement(targets) ? instances[0] : instances;\n}\ntippy.defaultProps = defaultProps;\ntippy.setDefaultProps = setDefaultProps;\ntippy.currentInput = currentInput;\nvar hideAll = function hideAll(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp, excludedReferenceOrInstance = _ref.exclude, duration = _ref.duration;\n    mountedInstances.forEach(function(instance) {\n        var isExcluded = false;\n        if (excludedReferenceOrInstance) {\n            isExcluded = isReferenceElement(excludedReferenceOrInstance) ? instance.reference === excludedReferenceOrInstance : instance.popper === excludedReferenceOrInstance.popper;\n        }\n        if (!isExcluded) {\n            var originalDuration = instance.props.duration;\n            instance.setProps({\n                duration: duration\n            });\n            instance.hide();\n            if (!instance.state.isDestroyed) {\n                instance.setProps({\n                    duration: originalDuration\n                });\n            }\n        }\n    });\n};\n// every time the popper is destroyed (i.e. a new target), removing the styles\n// and causing transitions to break for singletons when the console is open, but\n// most notably for non-transform styles being used, `gpuAcceleration: false`.\nvar applyStylesModifier = Object.assign({}, _popperjs_core__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n    effect: function effect(_ref) {\n        var state = _ref.state;\n        var initialStyles = {\n            popper: {\n                position: state.options.strategy,\n                left: \"0\",\n                top: \"0\",\n                margin: \"0\"\n            },\n            arrow: {\n                position: \"absolute\"\n            },\n            reference: {}\n        };\n        Object.assign(state.elements.popper.style, initialStyles.popper);\n        state.styles = initialStyles;\n        if (state.elements.arrow) {\n            Object.assign(state.elements.arrow.style, initialStyles.arrow);\n        } // intentionally return no cleanup function\n    // return () => { ... }\n    }\n});\nvar createSingleton = function createSingleton(tippyInstances, optionalProps) {\n    var _optionalProps$popper;\n    if (optionalProps === void 0) {\n        optionalProps = {};\n    }\n    /* istanbul ignore else */ if (true) {\n        errorWhen(!Array.isArray(tippyInstances), [\n            \"The first argument passed to createSingleton() must be an array of\",\n            \"tippy instances. The passed value was\",\n            String(tippyInstances)\n        ].join(\" \"));\n    }\n    var individualInstances = tippyInstances;\n    var references = [];\n    var triggerTargets = [];\n    var currentTarget;\n    var overrides = optionalProps.overrides;\n    var interceptSetPropsCleanups = [];\n    var shownOnCreate = false;\n    function setTriggerTargets() {\n        triggerTargets = individualInstances.map(function(instance) {\n            return normalizeToArray(instance.props.triggerTarget || instance.reference);\n        }).reduce(function(acc, item) {\n            return acc.concat(item);\n        }, []);\n    }\n    function setReferences() {\n        references = individualInstances.map(function(instance) {\n            return instance.reference;\n        });\n    }\n    function enableInstances(isEnabled) {\n        individualInstances.forEach(function(instance) {\n            if (isEnabled) {\n                instance.enable();\n            } else {\n                instance.disable();\n            }\n        });\n    }\n    function interceptSetProps(singleton) {\n        return individualInstances.map(function(instance) {\n            var originalSetProps = instance.setProps;\n            instance.setProps = function(props) {\n                originalSetProps(props);\n                if (instance.reference === currentTarget) {\n                    singleton.setProps(props);\n                }\n            };\n            return function() {\n                instance.setProps = originalSetProps;\n            };\n        });\n    } // have to pass singleton, as it maybe undefined on first call\n    function prepareInstance(singleton, target) {\n        var index = triggerTargets.indexOf(target); // bail-out\n        if (target === currentTarget) {\n            return;\n        }\n        currentTarget = target;\n        var overrideProps = (overrides || []).concat(\"content\").reduce(function(acc, prop) {\n            acc[prop] = individualInstances[index].props[prop];\n            return acc;\n        }, {});\n        singleton.setProps(Object.assign({}, overrideProps, {\n            getReferenceClientRect: typeof overrideProps.getReferenceClientRect === \"function\" ? overrideProps.getReferenceClientRect : function() {\n                var _references$index;\n                return (_references$index = references[index]) == null ? void 0 : _references$index.getBoundingClientRect();\n            }\n        }));\n    }\n    enableInstances(false);\n    setReferences();\n    setTriggerTargets();\n    var plugin = {\n        fn: function fn() {\n            return {\n                onDestroy: function onDestroy() {\n                    enableInstances(true);\n                },\n                onHidden: function onHidden() {\n                    currentTarget = null;\n                },\n                onClickOutside: function onClickOutside(instance) {\n                    if (instance.props.showOnCreate && !shownOnCreate) {\n                        shownOnCreate = true;\n                        currentTarget = null;\n                    }\n                },\n                onShow: function onShow(instance) {\n                    if (instance.props.showOnCreate && !shownOnCreate) {\n                        shownOnCreate = true;\n                        prepareInstance(instance, references[0]);\n                    }\n                },\n                onTrigger: function onTrigger(instance, event) {\n                    prepareInstance(instance, event.currentTarget);\n                }\n            };\n        }\n    };\n    var singleton = tippy(div(), Object.assign({}, removeProperties(optionalProps, [\n        \"overrides\"\n    ]), {\n        plugins: [\n            plugin\n        ].concat(optionalProps.plugins || []),\n        triggerTarget: triggerTargets,\n        popperOptions: Object.assign({}, optionalProps.popperOptions, {\n            modifiers: [].concat(((_optionalProps$popper = optionalProps.popperOptions) == null ? void 0 : _optionalProps$popper.modifiers) || [], [\n                applyStylesModifier\n            ])\n        })\n    }));\n    var originalShow = singleton.show;\n    singleton.show = function(target) {\n        originalShow(); // first time, showOnCreate or programmatic call with no params\n        // default to showing first instance\n        if (!currentTarget && target == null) {\n            return prepareInstance(singleton, references[0]);\n        } // triggered from event (do nothing as prepareInstance already called by onTrigger)\n        // programmatic call with no params when already visible (do nothing again)\n        if (currentTarget && target == null) {\n            return;\n        } // target is index of instance\n        if (typeof target === \"number\") {\n            return references[target] && prepareInstance(singleton, references[target]);\n        } // target is a child tippy instance\n        if (individualInstances.indexOf(target) >= 0) {\n            var ref = target.reference;\n            return prepareInstance(singleton, ref);\n        } // target is a ReferenceElement\n        if (references.indexOf(target) >= 0) {\n            return prepareInstance(singleton, target);\n        }\n    };\n    singleton.showNext = function() {\n        var first = references[0];\n        if (!currentTarget) {\n            return singleton.show(0);\n        }\n        var index = references.indexOf(currentTarget);\n        singleton.show(references[index + 1] || first);\n    };\n    singleton.showPrevious = function() {\n        var last = references[references.length - 1];\n        if (!currentTarget) {\n            return singleton.show(last);\n        }\n        var index = references.indexOf(currentTarget);\n        var target = references[index - 1] || last;\n        singleton.show(target);\n    };\n    var originalSetProps = singleton.setProps;\n    singleton.setProps = function(props) {\n        overrides = props.overrides || overrides;\n        originalSetProps(props);\n    };\n    singleton.setInstances = function(nextInstances) {\n        enableInstances(true);\n        interceptSetPropsCleanups.forEach(function(fn) {\n            return fn();\n        });\n        individualInstances = nextInstances;\n        enableInstances(false);\n        setReferences();\n        setTriggerTargets();\n        interceptSetPropsCleanups = interceptSetProps(singleton);\n        singleton.setProps({\n            triggerTarget: triggerTargets\n        });\n    };\n    interceptSetPropsCleanups = interceptSetProps(singleton);\n    return singleton;\n};\nvar BUBBLING_EVENTS_MAP = {\n    mouseover: \"mouseenter\",\n    focusin: \"focus\",\n    click: \"click\"\n};\n/**\n * Creates a delegate instance that controls the creation of tippy instances\n * for child elements (`target` CSS selector).\n */ function delegate(targets, props) {\n    /* istanbul ignore else */ if (true) {\n        errorWhen(!(props && props.target), [\n            \"You must specity a `target` prop indicating a CSS selector string matching\",\n            \"the target elements that should receive a tippy.\"\n        ].join(\" \"));\n    }\n    var listeners = [];\n    var childTippyInstances = [];\n    var disabled = false;\n    var target = props.target;\n    var nativeProps = removeProperties(props, [\n        \"target\"\n    ]);\n    var parentProps = Object.assign({}, nativeProps, {\n        trigger: \"manual\",\n        touch: false\n    });\n    var childProps = Object.assign({\n        touch: defaultProps.touch\n    }, nativeProps, {\n        showOnCreate: true\n    });\n    var returnValue = tippy(targets, parentProps);\n    var normalizedReturnValue = normalizeToArray(returnValue);\n    function onTrigger(event) {\n        if (!event.target || disabled) {\n            return;\n        }\n        var targetNode = event.target.closest(target);\n        if (!targetNode) {\n            return;\n        } // Get relevant trigger with fallbacks:\n        // 1. Check `data-tippy-trigger` attribute on target node\n        // 2. Fallback to `trigger` passed to `delegate()`\n        // 3. Fallback to `defaultProps.trigger`\n        var trigger = targetNode.getAttribute(\"data-tippy-trigger\") || props.trigger || defaultProps.trigger; // @ts-ignore\n        if (targetNode._tippy) {\n            return;\n        }\n        if (event.type === \"touchstart\" && typeof childProps.touch === \"boolean\") {\n            return;\n        }\n        if (event.type !== \"touchstart\" && trigger.indexOf(BUBBLING_EVENTS_MAP[event.type]) < 0) {\n            return;\n        }\n        var instance = tippy(targetNode, childProps);\n        if (instance) {\n            childTippyInstances = childTippyInstances.concat(instance);\n        }\n    }\n    function on(node, eventType, handler, options) {\n        if (options === void 0) {\n            options = false;\n        }\n        node.addEventListener(eventType, handler, options);\n        listeners.push({\n            node: node,\n            eventType: eventType,\n            handler: handler,\n            options: options\n        });\n    }\n    function addEventListeners(instance) {\n        var reference = instance.reference;\n        on(reference, \"touchstart\", onTrigger, TOUCH_OPTIONS);\n        on(reference, \"mouseover\", onTrigger);\n        on(reference, \"focusin\", onTrigger);\n        on(reference, \"click\", onTrigger);\n    }\n    function removeEventListeners() {\n        listeners.forEach(function(_ref) {\n            var node = _ref.node, eventType = _ref.eventType, handler = _ref.handler, options = _ref.options;\n            node.removeEventListener(eventType, handler, options);\n        });\n        listeners = [];\n    }\n    function applyMutations(instance) {\n        var originalDestroy = instance.destroy;\n        var originalEnable = instance.enable;\n        var originalDisable = instance.disable;\n        instance.destroy = function(shouldDestroyChildInstances) {\n            if (shouldDestroyChildInstances === void 0) {\n                shouldDestroyChildInstances = true;\n            }\n            if (shouldDestroyChildInstances) {\n                childTippyInstances.forEach(function(instance) {\n                    instance.destroy();\n                });\n            }\n            childTippyInstances = [];\n            removeEventListeners();\n            originalDestroy();\n        };\n        instance.enable = function() {\n            originalEnable();\n            childTippyInstances.forEach(function(instance) {\n                return instance.enable();\n            });\n            disabled = false;\n        };\n        instance.disable = function() {\n            originalDisable();\n            childTippyInstances.forEach(function(instance) {\n                return instance.disable();\n            });\n            disabled = true;\n        };\n        addEventListeners(instance);\n    }\n    normalizedReturnValue.forEach(applyMutations);\n    return returnValue;\n}\nvar animateFill = {\n    name: \"animateFill\",\n    defaultValue: false,\n    fn: function fn(instance) {\n        var _instance$props$rende;\n        // @ts-ignore\n        if (!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy)) {\n            if (true) {\n                errorWhen(instance.props.animateFill, \"The `animateFill` plugin requires the default render function.\");\n            }\n            return {};\n        }\n        var _getChildren = getChildren(instance.popper), box = _getChildren.box, content = _getChildren.content;\n        var backdrop = instance.props.animateFill ? createBackdropElement() : null;\n        return {\n            onCreate: function onCreate() {\n                if (backdrop) {\n                    box.insertBefore(backdrop, box.firstElementChild);\n                    box.setAttribute(\"data-animatefill\", \"\");\n                    box.style.overflow = \"hidden\";\n                    instance.setProps({\n                        arrow: false,\n                        animation: \"shift-away\"\n                    });\n                }\n            },\n            onMount: function onMount() {\n                if (backdrop) {\n                    var transitionDuration = box.style.transitionDuration;\n                    var duration = Number(transitionDuration.replace(\"ms\", \"\")); // The content should fade in after the backdrop has mostly filled the\n                    // tooltip element. `clip-path` is the other alternative but is not\n                    // well-supported and is buggy on some devices.\n                    content.style.transitionDelay = Math.round(duration / 10) + \"ms\";\n                    backdrop.style.transitionDuration = transitionDuration;\n                    setVisibilityState([\n                        backdrop\n                    ], \"visible\");\n                }\n            },\n            onShow: function onShow() {\n                if (backdrop) {\n                    backdrop.style.transitionDuration = \"0ms\";\n                }\n            },\n            onHide: function onHide() {\n                if (backdrop) {\n                    setVisibilityState([\n                        backdrop\n                    ], \"hidden\");\n                }\n            }\n        };\n    }\n};\nfunction createBackdropElement() {\n    var backdrop = div();\n    backdrop.className = BACKDROP_CLASS;\n    setVisibilityState([\n        backdrop\n    ], \"hidden\");\n    return backdrop;\n}\nvar mouseCoords = {\n    clientX: 0,\n    clientY: 0\n};\nvar activeInstances = [];\nfunction storeMouseCoords(_ref) {\n    var clientX = _ref.clientX, clientY = _ref.clientY;\n    mouseCoords = {\n        clientX: clientX,\n        clientY: clientY\n    };\n}\nfunction addMouseCoordsListener(doc) {\n    doc.addEventListener(\"mousemove\", storeMouseCoords);\n}\nfunction removeMouseCoordsListener(doc) {\n    doc.removeEventListener(\"mousemove\", storeMouseCoords);\n}\nvar followCursor = {\n    name: \"followCursor\",\n    defaultValue: false,\n    fn: function fn(instance) {\n        var reference = instance.reference;\n        var doc = getOwnerDocument(instance.props.triggerTarget || reference);\n        var isInternalUpdate = false;\n        var wasFocusEvent = false;\n        var isUnmounted = true;\n        var prevProps = instance.props;\n        function getIsInitialBehavior() {\n            return instance.props.followCursor === \"initial\" && instance.state.isVisible;\n        }\n        function addListener() {\n            doc.addEventListener(\"mousemove\", onMouseMove);\n        }\n        function removeListener() {\n            doc.removeEventListener(\"mousemove\", onMouseMove);\n        }\n        function unsetGetReferenceClientRect() {\n            isInternalUpdate = true;\n            instance.setProps({\n                getReferenceClientRect: null\n            });\n            isInternalUpdate = false;\n        }\n        function onMouseMove(event) {\n            // If the instance is interactive, avoid updating the position unless it's\n            // over the reference element\n            var isCursorOverReference = event.target ? reference.contains(event.target) : true;\n            var followCursor = instance.props.followCursor;\n            var clientX = event.clientX, clientY = event.clientY;\n            var rect = reference.getBoundingClientRect();\n            var relativeX = clientX - rect.left;\n            var relativeY = clientY - rect.top;\n            if (isCursorOverReference || !instance.props.interactive) {\n                instance.setProps({\n                    // @ts-ignore - unneeded DOMRect properties\n                    getReferenceClientRect: function getReferenceClientRect() {\n                        var rect = reference.getBoundingClientRect();\n                        var x = clientX;\n                        var y = clientY;\n                        if (followCursor === \"initial\") {\n                            x = rect.left + relativeX;\n                            y = rect.top + relativeY;\n                        }\n                        var top = followCursor === \"horizontal\" ? rect.top : y;\n                        var right = followCursor === \"vertical\" ? rect.right : x;\n                        var bottom = followCursor === \"horizontal\" ? rect.bottom : y;\n                        var left = followCursor === \"vertical\" ? rect.left : x;\n                        return {\n                            width: right - left,\n                            height: bottom - top,\n                            top: top,\n                            right: right,\n                            bottom: bottom,\n                            left: left\n                        };\n                    }\n                });\n            }\n        }\n        function create() {\n            if (instance.props.followCursor) {\n                activeInstances.push({\n                    instance: instance,\n                    doc: doc\n                });\n                addMouseCoordsListener(doc);\n            }\n        }\n        function destroy() {\n            activeInstances = activeInstances.filter(function(data) {\n                return data.instance !== instance;\n            });\n            if (activeInstances.filter(function(data) {\n                return data.doc === doc;\n            }).length === 0) {\n                removeMouseCoordsListener(doc);\n            }\n        }\n        return {\n            onCreate: create,\n            onDestroy: destroy,\n            onBeforeUpdate: function onBeforeUpdate() {\n                prevProps = instance.props;\n            },\n            onAfterUpdate: function onAfterUpdate(_, _ref2) {\n                var followCursor = _ref2.followCursor;\n                if (isInternalUpdate) {\n                    return;\n                }\n                if (followCursor !== undefined && prevProps.followCursor !== followCursor) {\n                    destroy();\n                    if (followCursor) {\n                        create();\n                        if (instance.state.isMounted && !wasFocusEvent && !getIsInitialBehavior()) {\n                            addListener();\n                        }\n                    } else {\n                        removeListener();\n                        unsetGetReferenceClientRect();\n                    }\n                }\n            },\n            onMount: function onMount() {\n                if (instance.props.followCursor && !wasFocusEvent) {\n                    if (isUnmounted) {\n                        onMouseMove(mouseCoords);\n                        isUnmounted = false;\n                    }\n                    if (!getIsInitialBehavior()) {\n                        addListener();\n                    }\n                }\n            },\n            onTrigger: function onTrigger(_, event) {\n                if (isMouseEvent(event)) {\n                    mouseCoords = {\n                        clientX: event.clientX,\n                        clientY: event.clientY\n                    };\n                }\n                wasFocusEvent = event.type === \"focus\";\n            },\n            onHidden: function onHidden() {\n                if (instance.props.followCursor) {\n                    unsetGetReferenceClientRect();\n                    removeListener();\n                    isUnmounted = true;\n                }\n            }\n        };\n    }\n};\nfunction getProps(props, modifier) {\n    var _props$popperOptions;\n    return {\n        popperOptions: Object.assign({}, props.popperOptions, {\n            modifiers: [].concat((((_props$popperOptions = props.popperOptions) == null ? void 0 : _props$popperOptions.modifiers) || []).filter(function(_ref) {\n                var name = _ref.name;\n                return name !== modifier.name;\n            }), [\n                modifier\n            ])\n        })\n    };\n}\nvar inlinePositioning = {\n    name: \"inlinePositioning\",\n    defaultValue: false,\n    fn: function fn(instance) {\n        var reference = instance.reference;\n        function isEnabled() {\n            return !!instance.props.inlinePositioning;\n        }\n        var placement;\n        var cursorRectIndex = -1;\n        var isInternalUpdate = false;\n        var triedPlacements = [];\n        var modifier = {\n            name: \"tippyInlinePositioning\",\n            enabled: true,\n            phase: \"afterWrite\",\n            fn: function fn(_ref2) {\n                var state = _ref2.state;\n                if (isEnabled()) {\n                    if (triedPlacements.indexOf(state.placement) !== -1) {\n                        triedPlacements = [];\n                    }\n                    if (placement !== state.placement && triedPlacements.indexOf(state.placement) === -1) {\n                        triedPlacements.push(state.placement);\n                        instance.setProps({\n                            // @ts-ignore - unneeded DOMRect properties\n                            getReferenceClientRect: function getReferenceClientRect() {\n                                return _getReferenceClientRect(state.placement);\n                            }\n                        });\n                    }\n                    placement = state.placement;\n                }\n            }\n        };\n        function _getReferenceClientRect(placement) {\n            return getInlineBoundingClientRect(getBasePlacement(placement), reference.getBoundingClientRect(), arrayFrom(reference.getClientRects()), cursorRectIndex);\n        }\n        function setInternalProps(partialProps) {\n            isInternalUpdate = true;\n            instance.setProps(partialProps);\n            isInternalUpdate = false;\n        }\n        function addModifier() {\n            if (!isInternalUpdate) {\n                setInternalProps(getProps(instance.props, modifier));\n            }\n        }\n        return {\n            onCreate: addModifier,\n            onAfterUpdate: addModifier,\n            onTrigger: function onTrigger(_, event) {\n                if (isMouseEvent(event)) {\n                    var rects = arrayFrom(instance.reference.getClientRects());\n                    var cursorRect = rects.find(function(rect) {\n                        return rect.left - 2 <= event.clientX && rect.right + 2 >= event.clientX && rect.top - 2 <= event.clientY && rect.bottom + 2 >= event.clientY;\n                    });\n                    var index = rects.indexOf(cursorRect);\n                    cursorRectIndex = index > -1 ? index : cursorRectIndex;\n                }\n            },\n            onHidden: function onHidden() {\n                cursorRectIndex = -1;\n            }\n        };\n    }\n};\nfunction getInlineBoundingClientRect(currentBasePlacement, boundingRect, clientRects, cursorRectIndex) {\n    // Not an inline element, or placement is not yet known\n    if (clientRects.length < 2 || currentBasePlacement === null) {\n        return boundingRect;\n    } // There are two rects and they are disjoined\n    if (clientRects.length === 2 && cursorRectIndex >= 0 && clientRects[0].left > clientRects[1].right) {\n        return clientRects[cursorRectIndex] || boundingRect;\n    }\n    switch(currentBasePlacement){\n        case \"top\":\n        case \"bottom\":\n            {\n                var firstRect = clientRects[0];\n                var lastRect = clientRects[clientRects.length - 1];\n                var isTop = currentBasePlacement === \"top\";\n                var top = firstRect.top;\n                var bottom = lastRect.bottom;\n                var left = isTop ? firstRect.left : lastRect.left;\n                var right = isTop ? firstRect.right : lastRect.right;\n                var width = right - left;\n                var height = bottom - top;\n                return {\n                    top: top,\n                    bottom: bottom,\n                    left: left,\n                    right: right,\n                    width: width,\n                    height: height\n                };\n            }\n        case \"left\":\n        case \"right\":\n            {\n                var minLeft = Math.min.apply(Math, clientRects.map(function(rects) {\n                    return rects.left;\n                }));\n                var maxRight = Math.max.apply(Math, clientRects.map(function(rects) {\n                    return rects.right;\n                }));\n                var measureRects = clientRects.filter(function(rect) {\n                    return currentBasePlacement === \"left\" ? rect.left === minLeft : rect.right === maxRight;\n                });\n                var _top = measureRects[0].top;\n                var _bottom = measureRects[measureRects.length - 1].bottom;\n                var _left = minLeft;\n                var _right = maxRight;\n                var _width = _right - _left;\n                var _height = _bottom - _top;\n                return {\n                    top: _top,\n                    bottom: _bottom,\n                    left: _left,\n                    right: _right,\n                    width: _width,\n                    height: _height\n                };\n            }\n        default:\n            {\n                return boundingRect;\n            }\n    }\n}\nvar sticky = {\n    name: \"sticky\",\n    defaultValue: false,\n    fn: function fn(instance) {\n        var reference = instance.reference, popper = instance.popper;\n        function getReference() {\n            return instance.popperInstance ? instance.popperInstance.state.elements.reference : reference;\n        }\n        function shouldCheck(value) {\n            return instance.props.sticky === true || instance.props.sticky === value;\n        }\n        var prevRefRect = null;\n        var prevPopRect = null;\n        function updatePosition() {\n            var currentRefRect = shouldCheck(\"reference\") ? getReference().getBoundingClientRect() : null;\n            var currentPopRect = shouldCheck(\"popper\") ? popper.getBoundingClientRect() : null;\n            if (currentRefRect && areRectsDifferent(prevRefRect, currentRefRect) || currentPopRect && areRectsDifferent(prevPopRect, currentPopRect)) {\n                if (instance.popperInstance) {\n                    instance.popperInstance.update();\n                }\n            }\n            prevRefRect = currentRefRect;\n            prevPopRect = currentPopRect;\n            if (instance.state.isMounted) {\n                requestAnimationFrame(updatePosition);\n            }\n        }\n        return {\n            onMount: function onMount() {\n                if (instance.props.sticky) {\n                    updatePosition();\n                }\n            }\n        };\n    }\n};\nfunction areRectsDifferent(rectA, rectB) {\n    if (rectA && rectB) {\n        return rectA.top !== rectB.top || rectA.right !== rectB.right || rectA.bottom !== rectB.bottom || rectA.left !== rectB.left;\n    }\n    return true;\n}\ntippy.setDefaultProps({\n    render: render\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (tippy);\n //# sourceMappingURL=tippy.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tippy.js/dist/tippy.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tippy.js/dist/tippy.css":
/*!**********************************************!*\
  !*** ./node_modules/tippy.js/dist/tippy.css ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"e012f5144451\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGlwcHkuanMvZGlzdC90aXBweS5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92cmlzdG8tbmV4dC8uL25vZGVfbW9kdWxlcy90aXBweS5qcy9kaXN0L3RpcHB5LmNzcz8wYTAxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiZTAxMmY1MTQ0NDUxXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tippy.js/dist/tippy.css\n");

/***/ })

};
;